pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with pwr_h;
with bits_pthreadtypes_h;
limited with rt_plc_h;

package rt_plc_timer_h is

   --  arg-macro: procedure PTRREL (r, p)
   --    gdh_StoreRtdbPointer((unsigned long *)r, (void *)p )
   --  arg-macro: function RELPTR (r)
   --    return (unsigned long)r = 0) ? NULL : gdh_TranslateRtdbPointer((unsigned long)r;
   --  arg-macro: procedure PLC_LOCK_MUTEX (m)
   --    pthread_mutex_lock(andm)
   --  arg-macro: procedure PLC_UNLOCK_MUTEX (m)
   --    pthread_mutex_unlock(andm)
   --  arg-macro: procedure timer_in (tp, o)
   --    { o.TimerCount := o.TimerTime / tp.f_scan_time; if ( noto.TimerFlag  and then  (o.TimerCount > 0)) { o.TimerFlag := TRUE; (o.TimerNext) := tp.PlcThread.TimerStart; PTRREL(andtp.PlcThread.TimerStart, ando.TimerFlag ); } }
  -- 
  -- * Proview   Open Source Process Control.
  -- * Copyright (C) 2005-2014 SSAB EMEA AB.
  -- *
  -- * This file is part of Proview.
  -- *
  -- * This program is free software; you can redistribute it and/or 
  -- * modify it under the terms of the GNU General Public License as 
  -- * published by the Free Software Foundation, either version 2 of 
  -- * the License, or (at your option) any later version.
  -- *
  -- * This program is distributed in the hope that it will be useful 
  -- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
  -- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
  -- * GNU General Public License for more details.
  -- *
  -- * You should have received a copy of the GNU General Public License 
  -- * along with Proview. If not, see <http://www.gnu.org/licenses/>
  -- *
  -- * Linking Proview statically or dynamically with other modules is
  -- * making a combined work based on Proview. Thus, the terms and 
  -- * conditions of the GNU General Public License cover the whole 
  -- * combination.
  -- *
  -- * In addition, as a special exception, the copyright holders of
  -- * Proview give you permission to, from the build function in the
  -- * Proview Configurator, combine Proview with modules generated by the
  -- * Proview PLC Editor to a PLC program, regardless of the license
  -- * terms of these modules. You may copy and distribute the resulting
  -- * combined work under the terms of your choice, provided that every 
  -- * copy of the combined work is accompanied by a complete copy of 
  -- * the source code of Proview (the version used to produce the 
  -- * combined work), being distributed under the terms of the GNU 
  -- * General Public License plus this exception.
  --  

   type plc_sTimer is record
      TimerFlag : aliased pwr_h.pwr_tBoolean;  -- rt_plc_timer.h:57
      TimerNext : access pwr_h.pwr_tBoolean;  -- rt_plc_timer.h:58
      TimerCount : aliased pwr_h.pwr_tUInt32;  -- rt_plc_timer.h:59
      TimerDO : access pwr_h.pwr_tBoolean;  -- rt_plc_timer.h:60
      TimerTime : aliased pwr_h.pwr_tFloat32;  -- rt_plc_timer.h:61
      TimerDODum : aliased pwr_h.pwr_tBoolean;  -- rt_plc_timer.h:62
      TimerObjDId : aliased pwr_h.pwr_tObjid;  -- rt_plc_timer.h:63
      TimerAcc : aliased pwr_h.pwr_tInt32;  -- rt_plc_timer.h:64
      TimerMin : aliased pwr_h.pwr_tFloat32;  -- rt_plc_timer.h:65
      TimerMax : aliased pwr_h.pwr_tFloat32;  -- rt_plc_timer.h:66
   end record;
   pragma Convention (C_Pass_By_Copy, plc_sTimer);  -- rt_plc_timer.h:67

   --  skipped anonymous struct anon_112

  --	Insert timer into timer-queue	 
   timer_mutex : bits_pthreadtypes_h.pthread_mutex_t;  -- rt_plc_timer.h:84
   pragma Import (C, timer_mutex, "timer_mutex");

   procedure plc_inittimer (tp : access rt_plc_h.plc_sThread);  -- rt_plc_timer.h:111
   pragma Import (CPP, plc_inittimer, "_Z13plc_inittimerP11plc_sThread");

   procedure plc_timerhandler (tp : access rt_plc_h.plc_sThread);  -- rt_plc_timer.h:112
   pragma Import (CPP, plc_timerhandler, "_Z16plc_timerhandlerP11plc_sThread");

end rt_plc_timer_h;
