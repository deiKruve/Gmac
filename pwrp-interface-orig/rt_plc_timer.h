/* 
 * Proview   Open Source Process Control.
 * Copyright (C) 2005-2014 SSAB EMEA AB.
 *
 * This file is part of Proview.
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation, either version 2 of 
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with Proview. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking Proview statically or dynamically with other modules is
 * making a combined work based on Proview. Thus, the terms and 
 * conditions of the GNU General Public License cover the whole 
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * Proview give you permission to, from the build function in the
 * Proview Configurator, combine Proview with modules generated by the
 * Proview PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every 
 * copy of the combined work is accompanied by a complete copy of 
 * the source code of Proview (the version used to produce the 
 * combined work), being distributed under the terms of the GNU 
 * General Public License plus this exception.
 */

#ifndef rt_plc_timer_h
#define rt_plc_timer_h 

#ifdef OS_ELN
# include $mutex
#endif

#if defined OS_POSIX
# include <pthread.h>
#endif

#ifndef pwr_h
# include "pwr.h"
#endif

#ifndef rt_gdh_h
# include "rt_gdh.h"
#endif

typedef	struct {	
  pwr_tBoolean                        TimerFlag pwr_dAlignLW;
  pwr_tBoolean                        *TimerNext pwr_dAlignLW;
  pwr_tUInt32                         TimerCount pwr_dAlignLW;
  pwr_tBoolean                        *TimerDO pwr_dAlignLW;
  pwr_tFloat32                        TimerTime pwr_dAlignLW;
  pwr_tBoolean                        TimerDODum pwr_dAlignW;
  pwr_tObjid                          TimerObjDId pwr_dAlignW;
  pwr_tInt32                          TimerAcc pwr_dAlignW;
  pwr_tFloat32                        TimerMin pwr_dAlignW;
  pwr_tFloat32                        TimerMax pwr_dAlignW;
} plc_sTimer;

#define PTRREL(r, p) \
  gdh_StoreRtdbPointer((unsigned long *)r, (void *)p )

#define RELPTR(r) \
((unsigned long)r == 0) ? NULL : gdh_TranslateRtdbPointer((unsigned long)r)

/*	Insert timer into timer-queue	*/
#ifdef OS_ELN

  extern MUTEX timer_mutex;
# define PLC_LOCK_MUTEX(m)  	ELN$LOCK_MUTEX(m)
# define PLC_UNLOCK_MUTEX(m)  	ELN$UNLOCK_MUTEX(m)

#elif defined OS_POSIX

  extern pthread_mutex_t timer_mutex;
# define PLC_LOCK_MUTEX(m)  pthread_mutex_lock(&m)
# define PLC_UNLOCK_MUTEX(m)  pthread_mutex_unlock(&m)

#elif defined OS_VMS

# define timer_mutex 0
# define PLC_LOCK_MUTEX(m) 
# define PLC_UNLOCK_MUTEX(m)

#endif

#define	timer_in(tp, o)	{				\
  o->TimerCount = o->TimerTime / tp->f_scan_time;	\
  if ( !o->TimerFlag && (o->TimerCount > 0)) {		\
    o->TimerFlag = TRUE;				\
    /*PLC_LOCK_MUTEX(tp->timer_mutex);*/		\
    (o->TimerNext) = tp->PlcThread->TimerStart;		\
    PTRREL(&tp->PlcThread->TimerStart, &o->TimerFlag );	\
    /*PLC_UNLOCK_MUTEX(tp->timer_mutex);*/		\
  }							\
}

#ifndef rt_plc_h
# include "rt_plc.h"
#endif

void plc_inittimer (plc_sThread *tp);
void plc_timerhandler(plc_sThread *tp);

#endif
