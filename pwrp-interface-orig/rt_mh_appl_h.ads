pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with pwr_h;
with rt_mh_net_h;
with Interfaces.C.Strings;

package rt_mh_appl_h is


   RS_MH_APPL_VERSION : aliased constant String := "X2.3.1" & ASCII.NUL;  --  rt_mh_appl.h:43

  -- 
  -- * Proview   Open Source Process Control.
  -- * Copyright (C) 2005-2014 SSAB EMEA AB.
  -- *
  -- * This file is part of Proview.
  -- *
  -- * This program is free software; you can redistribute it and/or 
  -- * modify it under the terms of the GNU General Public License as 
  -- * published by the Free Software Foundation, either version 2 of 
  -- * the License, or (at your option) any later version.
  -- *
  -- * This program is distributed in the hope that it will be useful 
  -- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
  -- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
  -- * GNU General Public License for more details.
  -- *
  -- * You should have received a copy of the GNU General Public License 
  -- * along with Proview. If not, see <http://www.gnu.org/licenses/>
  -- *
  -- * Linking Proview statically or dynamically with other modules is
  -- * making a combined work based on Proview. Thus, the terms and 
  -- * conditions of the GNU General Public License cover the whole 
  -- * combination.
  -- *
  -- * In addition, as a special exception, the copyright holders of
  -- * Proview give you permission to, from the build function in the
  -- * Proview Configurator, combine Proview with modules generated by the
  -- * Proview PLC Editor to a PLC program, regardless of the license
  -- * terms of these modules. You may copy and distribute the resulting
  -- * combined work under the terms of your choice, provided that every 
  -- * copy of the combined work is accompanied by a complete copy of 
  -- * the source code of Proview (the version used to produce the 
  -- * combined work), being distributed under the terms of the GNU 
  -- * General Public License plus this exception.
  --  

  --* @addtogroup MSGH  
  --@{ 
  --* @defgroup MSGH_DS MhAppl Data Structures
  -- *  @ingroup MSGH
  -- *  @{
  --  

  -- Structures  
  --*
  -- * mhs_ApplMessage
  --  

   type mhs_ApplMessage;
   subtype mh_sApplMessage is mhs_ApplMessage;

  --*
  -- * @brief Flags governing how mh interacts with the application.
  -- * @note Version V1.0 ignores these flags.
  --  

  --*< If an application terminates abnormally, 
  --                                            mh will remove all data connected to it, i. e. 
  --                                            all active messages will be cancelled. If this flag 
  --                                            is set this clean-up will be suppressed. This can be 
  --                                            useful if the application will be restarted, in which 
  --                                            case it can find out if it has any active messages.  

  --*< Mh usually generates an alarm message if a connected 
  --                                                application terminates abnormally, setting this flag 
  --                                                will suppress this message.  

   subtype mh_mApplFlags is unsigned;
   mh_mApplFlags_NoAbortCleanUp : constant mh_mApplFlags := 1;
   mh_mApplFlags_NoAbortMsg : constant mh_mApplFlags := 2;  -- rt_mh_appl.h:92

  --*
  -- * @brief The structure describing an application message. 
  --  

  --*< The identity given to the message, which is used as a handle 
  --                                       when generating an acknowledgement or return message to the 
  --                                       message and should be kept by the application for this purpose. 
  --                                       This attribute is only used when calling mh_ApplGetMsgInfo, 
  --                                       otherwise the id is supplied/returned as a parameter of its own. 

   type mhs_ApplMessage is record
      Id : aliased pwr_h.pwr_tUInt32;  -- rt_mh_appl.h:98
      Object : aliased pwr_h.pwr_tObjid;  -- rt_mh_appl.h:103
      SupObject : aliased pwr_h.pwr_tObjid;  -- rt_mh_appl.h:107
      Outunit : aliased pwr_h.pwr_tObjid;  -- rt_mh_appl.h:112
      EventFlags : aliased rt_mh_net_h.mh_mEventFlags;  -- rt_mh_appl.h:115
      EventTime : aliased pwr_h.pwr_tTime;  -- rt_mh_appl.h:116
      EventName : aliased pwr_h.pwr_tString80;  -- rt_mh_appl.h:119
      EventType : aliased rt_mh_net_h.mh_eEvent;  -- rt_mh_appl.h:122
      EventText : aliased pwr_h.pwr_tString80;  -- rt_mh_appl.h:124
      EventPrio : aliased rt_mh_net_h.mh_eEventPrio;  -- rt_mh_appl.h:126
      EventStatus : aliased rt_mh_net_h.mh_mEventStatus;  -- rt_mh_appl.h:127
      SupInfo : aliased rt_mh_net_h.mh_uSupInfo;  -- rt_mh_appl.h:129
      EventSound : aliased pwr_h.pwr_sAttrRef;  -- rt_mh_appl.h:131
      EventMoreText : aliased pwr_h.pwr_tString256;  -- rt_mh_appl.h:132
   end record;
   pragma Convention (C_Pass_By_Copy, mhs_ApplMessage);  -- rt_mh_appl.h:97

  --*< An object that is associated with the event. When the operator 
  --                                       marks the message and clicks on "Select", this object will be shown
  --                                       in the operator window. If you do not want this facility, supply a 
  --                                       value of 0 and set the flag mh_EventFlags_NoObject in EventFlags. 

  --*< A supervision object associated with the event. When the operator 
  --                                       selects the functions "ActionText", he will see the text attached 
  --                                       to this object. It is, for instance, possible to use the 
  --                                       application object for this attribute, or zero, in which case no 
  --                                       text will be associated. 

  --*< A message can be directed to a specific out-unit by supplying the 
  --                                       object identity of the unit, if you supply zero the message will be
  --                                       sent to all out-units.  

  --*< Flags that modify the properties of a message, See mh_mEventFlags. 
  --*< The time when the event that initiated the creation of the message 
  --                                       occurred. This must be supplied by the application, mh will not put
  --                                       a time stamp on the message.  

  --*< A name that identifies the event, can for instance be the name of
  --                                       an object. It will be shown as the first row of a message in the 
  --                                       alarm window. 

  --*< Specifies the kind of message that will be generated, 
  --				       alarm or informational. See mh_eEvent. 

  --*< An arbitrary string supplying information about the event. 
  --				     It will be shown as the second row of a message in the alarm window. 

  --*< Sets the priority of the message, See mh_eEventPrio. 
  --*< Returns the status of a message, See mh_mEventStatus. 
  --				     This attribute is only used when calling mh_ApplGetMsgInfo. 

  --*< Supplies the type of supervision data that should be associated 
  --				     with the message: analog, digital or none. See mh_eSupType. 

  --*< Reference to sound object. Determines the alarm sound.  
  --*< An arbitrary string supplying more information about the event  
  --*@} 
  --* @defgroup MSGH_FC MhAppl Functions
  -- *  @ingroup MSGH
  -- *  @{
  --  

   function mh_ApplCancel (id : pwr_h.pwr_tUInt32; cancelText : access pwr_h.pwr_tString80) return pwr_h.pwr_tStatus;  -- rt_mh_appl.h:142
   pragma Import (C, mh_ApplCancel, "mh_ApplCancel");

  --------------------------------------------------------------------------------
  --* Connects this application to the local Handler.
  -- 

   function mh_ApplConnect
     (ApplObject : pwr_h.pwr_tObjid;
      Flags : mh_mApplFlags;
      AbortEventName : Interfaces.C.Strings.chars_ptr;
      AbortEventType : rt_mh_net_h.mh_eEvent;
      AbortEventPrio : rt_mh_net_h.mh_eEventPrio;
      AbortEventFlags : rt_mh_net_h.mh_mEventFlags;
      AbortEventText : Interfaces.C.Strings.chars_ptr;
      NoOfActMessages : access pwr_h.pwr_tUInt32) return pwr_h.pwr_tStatus;  -- rt_mh_appl.h:150
   pragma Import (C, mh_ApplConnect, "mh_ApplConnect");

  --------------------------------------------------------------------------------
  --* Informs the local Handler to remove this Application from its list of known
  --* applications.
  -- 

   function mh_ApplDisconnect return pwr_h.pwr_tStatus;  -- rt_mh_appl.h:165
   pragma Import (C, mh_ApplDisconnect, "mh_ApplDisconnect");

  --------------------------------------------------------------------------------
  --* Send a message to the local Handler.
  -- 

   function mh_ApplMessage (Id : access pwr_h.pwr_tUInt32; Message : access mh_sApplMessage) return pwr_h.pwr_tStatus;  -- rt_mh_appl.h:171
   pragma Import (C, mh_ApplMessage, "mh_ApplMessage");

  --------------------------------------------------------------------------------
  --* This function returnes a message previously created by this application.
  -- 

   function mh_ApplReturn (Id : pwr_h.pwr_tUInt32; ReturnText : access pwr_h.pwr_tString80) return pwr_h.pwr_tStatus;  -- rt_mh_appl.h:179
   pragma Import (C, mh_ApplReturn, "mh_ApplReturn");

  --------------------------------------------------------------------------------
  -- 

   function mh_ApplGetMsgInfo (Id : pwr_h.pwr_tUInt32; Message : access mh_sApplMessage) return pwr_h.pwr_tStatus;  -- rt_mh_appl.h:186
   pragma Import (C, mh_ApplGetMsgInfo, "mh_ApplGetMsgInfo");

  --*@} 
  --*@} 
end rt_mh_appl_h;
