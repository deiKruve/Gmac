pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with pwr_h;
with rpc_types_h;
with co_platform_h;
with rt_net_h;
with rt_qcom_h;
limited with rpc_xdr_h;

package rt_mh_net_h is


   mh_cMsgClass : constant := 201;  --  rt_mh_net.h:58
   mh_cVersion : constant := 4;  --  rt_mh_net.h:59
   mh_cProcHandler : constant := 111;  --  rt_mh_net.h:60
   --  unsupported macro: mh_cProcAllHandlers qcom_cQmhAllHandlers
   --  unsupported macro: mh_cProcAllOutunits qcom_cQmhAllOutunits

   mh_cSendRcvTmo : constant := 200;  --  rt_mh_net.h:63

   mh_mEventStatus_NotRet : constant := (2 ** 0);  --  rt_mh_net.h:67
   mh_mEventStatus_NotAck : constant := (2 ** 1);  --  rt_mh_net.h:68
   mh_mEventStatus_Block : constant := (2 ** 2);  --  rt_mh_net.h:69

  -- * Please do not edit this file.
  -- * It was generated using rpcgen.
  --  

  -- 
  -- * Proview   $Id: rt_mh_net.x,v 1.5 2008-01-24 09:58:41 claes Exp $
  -- * Copyright (C) 2005 SSAB Oxelösund AB.
  -- *
  -- * This program is free software; you can redistribute it and/or 
  -- * modify it under the terms of the GNU General Public License as 
  -- * published by the Free Software Foundation, either version 2 of 
  -- * the License, or (at your option) any later version.
  -- *
  -- * This program is distributed in the hope that it will be useful 
  -- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
  -- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
  -- * GNU General Public License for more details.
  -- *
  -- * You should have received a copy of the GNU General Public License 
  -- * along with the program, if not, write to the Free Software 
  -- * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  --  

  -- Bit masks  
   subtype mh_mEventStatus is pwr_h.pwr_tUInt32;  -- rt_mh_net.h:72

  --* 
  -- * @ingroup MSGH_DS
  -- * @brief Type of event that the message handler recognizes.
  --  

   subtype mh_eEvent is unsigned;
   mh_eEvent_u_u : constant mh_eEvent := 0;
   mh_eEvent_Ack : constant mh_eEvent := 1;
   mh_eEvent_Block : constant mh_eEvent := 2;
   mh_eEvent_Cancel : constant mh_eEvent := 3;
   mh_eEvent_CancelBlock : constant mh_eEvent := 4;
   mh_eEvent_Missing : constant mh_eEvent := 5;
   mh_eEvent_Reblock : constant mh_eEvent := 6;
   mh_eEvent_Return : constant mh_eEvent := 7;
   mh_eEvent_Unblock : constant mh_eEvent := 8;
   mh_eEvent_Info : constant mh_eEvent := 32;
   mh_eEvent_Alarm : constant mh_eEvent := 64;
   mh_eEvent_u : constant mh_eEvent := 65;  -- rt_mh_net.h:78

  --* 
  -- * @ingroup MSGH_DS
  -- * @brief Event prio
  -- *
  -- * This enumeration defines the priority of the event. 
  -- * This affects how the message handler treats the generated message. 
  -- * For A and B priorities the alarm window displays number of alarms, 
  -- * number of unacknowledged alarms, identities of the alarms, and associated 
  -- * message texts. For C and D priorities, only number of alarms and number of 
  -- * unacknowledged alarms are shown. 
  -- * @param mh_eEventPrio_A Priority A, the highest priority. 
  -- * Alarm messages of this priority are shown in the upper part of the alarm window. 
  -- * @param mh_eEventPrio_B Priority B. 
  -- * These messages are shown in the lower part of the alarm window. 
  -- * @param mh_eEventPrio_C Priority C. 
  -- * @param mh_eEventPrio_D Priority D. This is the lowest priority. 
  --  

   subtype mh_eEventPrio is unsigned;
   mh_eEventPrio_u_u : constant mh_eEventPrio := 0;
   mh_eEventPrio_A : constant mh_eEventPrio := 67;
   mh_eEventPrio_B : constant mh_eEventPrio := 66;
   mh_eEventPrio_C : constant mh_eEventPrio := 65;
   mh_eEventPrio_D : constant mh_eEventPrio := 64;
   mh_eEventPrio_u : constant mh_eEventPrio := 63;  -- rt_mh_net.h:111

  --* 
  -- * @ingroup MSGH_DS
  -- * @brief Type of supervision data.
  -- * 
  -- * This enumeration is used to indicate what kind of data is supplied 
  -- * in an application message (See mh_sApplMessage).
  -- * @param  mh_eSupType_Digital Digital supervision data
  -- * @param  mh_eSupType_Analog Analog supervision data 
  -- * @param  mh_eSupType_Link   ZZZ
  -- * @param  mh_eSupType_Cycle  ZZZ
  --  

   subtype mh_eSupType is unsigned;
   mh_eSupType_u_u : constant mh_eSupType := 0;
   mh_eSupType_Digital : constant mh_eSupType := 1;
   mh_eSupType_Analog : constant mh_eSupType := 2;
   mh_eSupType_None : constant mh_eSupType := 3;
   mh_eSupType_Link : constant mh_eSupType := 4;
   mh_eSupType_Cycle : constant mh_eSupType := 4;
   mh_eSupType_u : constant mh_eSupType := 5;  -- rt_mh_net.h:132

   subtype mh_eMsg is unsigned;
   mh_eMsg_u_u : constant mh_eMsg := 0;
   mh_eMsg_ApplConnect : constant mh_eMsg := 1;
   mh_eMsg_ApplDisconnect : constant mh_eMsg := 2;
   mh_eMsg_ApplGetMsgInfo : constant mh_eMsg := 3;
   mh_eMsg_ApplMessage : constant mh_eMsg := 4;
   mh_eMsg_ApplReply : constant mh_eMsg := 5;
   mh_eMsg_ApplReturn : constant mh_eMsg := 6;
   mh_eMsg_Event : constant mh_eMsg := 8;
   mh_eMsg_HandlerDisconnect : constant mh_eMsg := 10;
   mh_eMsg_HandlerHello : constant mh_eMsg := 11;
   mh_eMsg_HandlerSync : constant mh_eMsg := 12;
   mh_eMsg_OutunitAck : constant mh_eMsg := 15;
   mh_eMsg_OutunitBlock : constant mh_eMsg := 16;
   mh_eMsg_OutunitDisconnect : constant mh_eMsg := 18;
   mh_eMsg_OutunitHello : constant mh_eMsg := 19;
   mh_eMsg_OutunitInfo : constant mh_eMsg := 20;
   mh_eMsg_OutunitSync : constant mh_eMsg := 21;
   mh_eMsg_OutunitClear : constant mh_eMsg := 22;
   mh_eMsg_ProcDown : constant mh_eMsg := 24;
   mh_eMsg_StopScanSup : constant mh_eMsg := 25;
   mh_eMsg_StartScanSup : constant mh_eMsg := 26;
   mh_eMsg_Sync : constant mh_eMsg := 27;
   mh_eMsg_u : constant mh_eMsg := 28;  -- rt_mh_net.h:143

   type mh_eOutunitType is 
     (mh_eOutunitType_u_u,
      mh_eOutunitType_Operator,
      mh_eOutunitType_Printer,
      mh_eOutunitType_File,
      mh_eOutunitType_Terminal,
      mh_eOutunitType_Logger,
      mh_eOutunitType_Post,
      mh_eOutunitType_SevHistEvents,
      mh_eOutunitType_u);
   pragma Convention (C, mh_eOutunitType);  -- rt_mh_net.h:170

   type mh_eSource is 
     (mh_eSource_u_u,
      mh_eSource_Scanner,
      mh_eSource_Application,
      mh_eSource_Handler,
      mh_eSource_Outunit,
      mh_eSource_Self,
      mh_eSource_Pcm,
      mh_eSource_u);
   pragma Convention (C, mh_eSource);  -- rt_mh_net.h:183

  --*
  -- * @ingroup MSGH_DS
  -- * @brief Defines a bit pattern. 
  -- *
  -- * @param mh_mEventFlags_Return Setting this flag enables a return message 
  -- * associated with this message to be shown in the event list. 
  -- * @param mh_mEventFlags_Ack Setting this flag enables an acknowledgement message 
  -- * associated with this message to be shown in the event list. 
  -- * @param mh_mEventFlags_Bell
  -- * @param mh_mEventFlags_Force
  -- * @param mh_mEventFlags_InfoWindow
  -- * @param mh_mEventFlags_Returned
  -- * @param mh_mEventFlags_NoObject
  --  

   subtype mh_mEventFlags is unsigned;
   mh_mEventFlags_Return : constant mh_mEventFlags := 1;
   mh_mEventFlags_Ack : constant mh_mEventFlags := 2;
   mh_mEventFlags_Bell : constant mh_mEventFlags := 4;
   mh_mEventFlags_Force : constant mh_mEventFlags := 8;
   mh_mEventFlags_InfoWindow : constant mh_mEventFlags := 16;
   mh_mEventFlags_Returned : constant mh_mEventFlags := 32;
   mh_mEventFlags_NoObject : constant mh_mEventFlags := 64;  -- rt_mh_net.h:209

  --*
  -- * @ingroup MSGH_DS
  -- * @brief Data describing supervision of an analog value 
  -- *
  -- * @param ActualValue The value of the supervised attribute at the 
  -- *                    time when the message was generated. 
  -- * @param CtrlLimit   The limit, at which a message will be generated. 
  -- * @param Hysteres    How much the supervised value will have to change before 
  -- *                    a return message will be issued. 
  -- * @param High        Indicates whether the message will be generated when the 
  -- *		       limit is exceeded (TRUE) or the value falls below it (FALSE).
  -- * @param Unit        A string representing the unit of the value. 
  --  

   type mh_sASupInfo is record
      ActualValue : aliased pwr_h.pwr_tFloat32;  -- rt_mh_net.h:234
      CtrlLimit : aliased pwr_h.pwr_tFloat32;  -- rt_mh_net.h:235
      Hysteres : aliased pwr_h.pwr_tFloat32;  -- rt_mh_net.h:236
      High : aliased pwr_h.pwr_tBoolean;  -- rt_mh_net.h:237
      Unit : aliased pwr_h.pwr_tString16;  -- rt_mh_net.h:238
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sASupInfo);  -- rt_mh_net.h:233

  --*
  -- * @ingroup MSGH_DS
  -- *
  -- * @brief Data describing supervision of a digital value 
  -- *
  -- * @param ActualValue The value of the supervised attribute at the time 
  -- *                    when the message was generated.
  -- * @param High        Indicates whether a high or a low value generates a message.
  --  

   type mh_sDSupInfo is record
      ActualValue : aliased pwr_h.pwr_tBoolean;  -- rt_mh_net.h:252
      High : aliased pwr_h.pwr_tBoolean;  -- rt_mh_net.h:253
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sDSupInfo);  -- rt_mh_net.h:251

  --*
  -- * @ingroup MSGH_DS 
  -- * @brief Data describing supervision data.
  -- * @param mh_uSubInfo_u Union that contains either mh_sASupInfo or mh_sDSupInfo.
  -- * @param mh_sASupInfo
  -- * @param mh_sDSupInfo
  --  

   type anon_149 (discr : unsigned := 0) is record
      case discr is
         when 0 =>
            A : aliased mh_sASupInfo;  -- rt_mh_net.h:265
         when others =>
            D : aliased mh_sDSupInfo;  -- rt_mh_net.h:266
      end case;
   end record;
   pragma Convention (C_Pass_By_Copy, anon_149);
   pragma Unchecked_Union (anon_149);
   type mh_uSupInfo is record
      SupType : aliased mh_eSupType;  -- rt_mh_net.h:264
      mh_uSupInfo_u : anon_149;  -- rt_mh_net.h:267
   end record;
   pragma Convention (C_Pass_By_Copy, mh_uSupInfo);  -- rt_mh_net.h:263

   function xdr_mh_uSupInfo return rpc_types_h.bool_t;  -- rt_mh_net.h:271
   pragma Import (C, xdr_mh_uSupInfo, "xdr_mh_uSupInfo");

   type mh_sHead is record
      xdr : aliased pwr_h.pwr_tBoolean;  -- rt_mh_net.h:275
      platform : aliased co_platform_h.co_sPlatform;  -- rt_mh_net.h:276
      ver : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:277
      source : aliased mh_eSource;  -- rt_mh_net.h:278
      birthTime : aliased rt_net_h.net_sTime;  -- rt_mh_net.h:279
      c_type : aliased mh_eMsg;  -- rt_mh_net.h:280
      qid : aliased rt_qcom_h.qcom_sQid;  -- rt_mh_net.h:281
      nix : aliased pwr_h.pwr_tNodeIndex;  -- rt_mh_net.h:282
      outunit : aliased pwr_h.pwr_tObjid;  -- rt_mh_net.h:283
      aid : aliased pwr_h.pwr_tObjid;  -- rt_mh_net.h:284
      ackGen : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:285
      blockGen : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:286
      selGen : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:287
      eventGen : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:288
      eventIdx : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:289
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sHead);  -- rt_mh_net.h:274

   type mh_sOutunitAck is record
      ackGen : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:294
      targetIdx : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:295
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sOutunitAck);  -- rt_mh_net.h:293

   type mh_sOutunitBlock is record
      blockGen : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:300
      object : aliased pwr_h.pwr_tObjid;  -- rt_mh_net.h:301
      outunit : aliased pwr_h.pwr_tObjid;  -- rt_mh_net.h:302
      prio : aliased mh_eEventPrio;  -- rt_mh_net.h:303
      time : aliased rt_net_h.net_sTime;  -- rt_mh_net.h:304
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sOutunitBlock);  -- rt_mh_net.h:299

   type mh_sSelL is record
      objName : aliased pwr_h.pwr_tString80;  -- rt_mh_net.h:309
      len : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:310
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sSelL);  -- rt_mh_net.h:308

   type mh_sEventId is record
      Nix : aliased pwr_h.pwr_tNodeIndex;  -- rt_mh_net.h:315
      BirthTime : aliased rt_net_h.net_sTime;  -- rt_mh_net.h:316
      Idx : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:317
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sEventId);  -- rt_mh_net.h:314

   type mh_sMsgInfo is record
      Id : aliased mh_sEventId;  -- rt_mh_net.h:322
      Object_V3 : aliased pwr_h.pwr_tObjid;  -- rt_mh_net.h:323
      Outunit : aliased pwr_h.pwr_tObjid;  -- rt_mh_net.h:324
      SupObject_V3 : aliased pwr_h.pwr_tObjid;  -- rt_mh_net.h:325
      EventFlags : aliased mh_mEventFlags;  -- rt_mh_net.h:326
      EventTime : aliased rt_net_h.net_sTime;  -- rt_mh_net.h:327
      EventName_V3 : aliased pwr_h.pwr_tString80;  -- rt_mh_net.h:328
      EventType : aliased mh_eEvent;  -- rt_mh_net.h:329
      EventPrio : aliased mh_eEventPrio;  -- rt_mh_net.h:330
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sMsgInfo);  -- rt_mh_net.h:321

   type mh_sAck is record
      Info : aliased mh_sMsgInfo;  -- rt_mh_net.h:335
      TargetId : aliased mh_sEventId;  -- rt_mh_net.h:336
      DetectTime : aliased rt_net_h.net_sTime;  -- rt_mh_net.h:337
      Outunit : aliased pwr_h.pwr_tObjid;  -- rt_mh_net.h:338
      SupInfo : aliased mh_uSupInfo;  -- rt_mh_net.h:339
      Object : aliased pwr_h.pwr_sAttrRef;  -- rt_mh_net.h:340
      SupObject : aliased pwr_h.pwr_sAttrRef;  -- rt_mh_net.h:341
      EventName : aliased pwr_h.pwr_tAName;  -- rt_mh_net.h:342
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sAck);  -- rt_mh_net.h:334

   type mh_sBlock is record
      Info : aliased mh_sMsgInfo;  -- rt_mh_net.h:347
      TargetId : aliased mh_sEventId;  -- rt_mh_net.h:348
      DetectTime : aliased rt_net_h.net_sTime;  -- rt_mh_net.h:349
      Outunit : aliased pwr_h.pwr_tObjid;  -- rt_mh_net.h:350
      Status : aliased mh_mEventStatus;  -- rt_mh_net.h:351
      Object : aliased pwr_h.pwr_sAttrRef;  -- rt_mh_net.h:352
      SupObject : aliased pwr_h.pwr_sAttrRef;  -- rt_mh_net.h:353
      EventName : aliased pwr_h.pwr_tAName;  -- rt_mh_net.h:354
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sBlock);  -- rt_mh_net.h:346

   type mh_sMessage is record
      Info : aliased mh_sMsgInfo;  -- rt_mh_net.h:359
      EventText : aliased pwr_h.pwr_tString80;  -- rt_mh_net.h:360
      Status : aliased mh_mEventStatus;  -- rt_mh_net.h:361
      SupInfo : aliased mh_uSupInfo;  -- rt_mh_net.h:362
      EventSound : aliased pwr_h.pwr_sAttrRef;  -- rt_mh_net.h:363
      EventMoreText : aliased pwr_h.pwr_tString256;  -- rt_mh_net.h:364
      Object : aliased pwr_h.pwr_sAttrRef;  -- rt_mh_net.h:365
      SupObject : aliased pwr_h.pwr_sAttrRef;  -- rt_mh_net.h:366
      EventName : aliased pwr_h.pwr_tAName;  -- rt_mh_net.h:367
      Receiver : aliased pwr_h.pwr_tString40;  -- rt_mh_net.h:368
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sMessage);  -- rt_mh_net.h:358

   type mh_sReturn is record
      Info : aliased mh_sMsgInfo;  -- rt_mh_net.h:373
      EventText : aliased pwr_h.pwr_tString80;  -- rt_mh_net.h:374
      TargetId : aliased mh_sEventId;  -- rt_mh_net.h:375
      DetectTime : aliased rt_net_h.net_sTime;  -- rt_mh_net.h:376
      SupInfo : aliased mh_uSupInfo;  -- rt_mh_net.h:377
      Object : aliased pwr_h.pwr_sAttrRef;  -- rt_mh_net.h:378
      SupObject : aliased pwr_h.pwr_sAttrRef;  -- rt_mh_net.h:379
      EventName : aliased pwr_h.pwr_tAName;  -- rt_mh_net.h:380
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sReturn);  -- rt_mh_net.h:372

   type mh_sOutunitInfo is record
      c_type : aliased mh_eOutunitType;  -- rt_mh_net.h:384
      selGen : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:385
      selSize : aliased pwr_h.pwr_tUInt32;  -- rt_mh_net.h:386
   end record;
   pragma Convention (C_Pass_By_Copy, mh_sOutunitInfo);  -- rt_mh_net.h:383

  -- Here comes select list if needed  
   function xdr_mh_sOutunitInfo return rpc_types_h.bool_t;  -- rt_mh_net.h:391
   pragma Import (C, xdr_mh_sOutunitInfo, "xdr_mh_sOutunitInfo");

  -- Prototypes  
   function mh_NetSendMessage
     (qid : access rt_qcom_h.qcom_sQid;
      recPlatform : access co_platform_h.co_sPlatform;
      prio : int;
      c_subtype : int;
      hp : access mh_sHead;
      size : unsigned) return pwr_h.pwr_tStatus;  -- rt_mh_net.h:397
   pragma Import (C, mh_NetSendMessage, "mh_NetSendMessage");

   function mh_NetXdrMessage
     (xdrs : access rpc_xdr_h.XDR;
      c_subtype : int;
      hp : access mh_sHead) return pwr_h.pwr_tStatus;  -- rt_mh_net.h:407
   pragma Import (C, mh_NetXdrMessage, "mh_NetXdrMessage");

  -- the xdr functions  
   function xdr_mh_mEventStatus (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_mEventStatus) return rpc_types_h.bool_t;  -- rt_mh_net.h:419
   pragma Import (C, xdr_mh_mEventStatus, "xdr_mh_mEventStatus");

   function xdr_mh_eEvent (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_eEvent) return rpc_types_h.bool_t;  -- rt_mh_net.h:420
   pragma Import (C, xdr_mh_eEvent, "xdr_mh_eEvent");

   function xdr_mh_eEventPrio (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_eEventPrio) return rpc_types_h.bool_t;  -- rt_mh_net.h:421
   pragma Import (C, xdr_mh_eEventPrio, "xdr_mh_eEventPrio");

   function xdr_mh_eSupType (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_eSupType) return rpc_types_h.bool_t;  -- rt_mh_net.h:422
   pragma Import (C, xdr_mh_eSupType, "xdr_mh_eSupType");

   function xdr_mh_eMsg (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_eMsg) return rpc_types_h.bool_t;  -- rt_mh_net.h:423
   pragma Import (C, xdr_mh_eMsg, "xdr_mh_eMsg");

   function xdr_mh_eOutunitType (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_eOutunitType) return rpc_types_h.bool_t;  -- rt_mh_net.h:424
   pragma Import (C, xdr_mh_eOutunitType, "xdr_mh_eOutunitType");

   function xdr_mh_eSource (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_eSource) return rpc_types_h.bool_t;  -- rt_mh_net.h:425
   pragma Import (C, xdr_mh_eSource, "xdr_mh_eSource");

   function xdr_mh_mEventFlags (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_mEventFlags) return rpc_types_h.bool_t;  -- rt_mh_net.h:426
   pragma Import (C, xdr_mh_mEventFlags, "xdr_mh_mEventFlags");

   function xdr_mh_sASupInfo (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sASupInfo) return rpc_types_h.bool_t;  -- rt_mh_net.h:427
   pragma Import (C, xdr_mh_sASupInfo, "xdr_mh_sASupInfo");

   function xdr_mh_sDSupInfo (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sDSupInfo) return rpc_types_h.bool_t;  -- rt_mh_net.h:428
   pragma Import (C, xdr_mh_sDSupInfo, "xdr_mh_sDSupInfo");

   function xdr_mh_sHead (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sHead) return rpc_types_h.bool_t;  -- rt_mh_net.h:429
   pragma Import (C, xdr_mh_sHead, "xdr_mh_sHead");

   function xdr_mh_sOutunitAck (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sOutunitAck) return rpc_types_h.bool_t;  -- rt_mh_net.h:430
   pragma Import (C, xdr_mh_sOutunitAck, "xdr_mh_sOutunitAck");

   function xdr_mh_sOutunitBlock (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sOutunitBlock) return rpc_types_h.bool_t;  -- rt_mh_net.h:431
   pragma Import (C, xdr_mh_sOutunitBlock, "xdr_mh_sOutunitBlock");

   function xdr_mh_sSelL (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sSelL) return rpc_types_h.bool_t;  -- rt_mh_net.h:432
   pragma Import (C, xdr_mh_sSelL, "xdr_mh_sSelL");

   function xdr_mh_sEventId (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sEventId) return rpc_types_h.bool_t;  -- rt_mh_net.h:433
   pragma Import (C, xdr_mh_sEventId, "xdr_mh_sEventId");

   function xdr_mh_sMsgInfo (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sMsgInfo) return rpc_types_h.bool_t;  -- rt_mh_net.h:434
   pragma Import (C, xdr_mh_sMsgInfo, "xdr_mh_sMsgInfo");

   function xdr_mh_sAck (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sAck) return rpc_types_h.bool_t;  -- rt_mh_net.h:435
   pragma Import (C, xdr_mh_sAck, "xdr_mh_sAck");

   function xdr_mh_sBlock (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sBlock) return rpc_types_h.bool_t;  -- rt_mh_net.h:436
   pragma Import (C, xdr_mh_sBlock, "xdr_mh_sBlock");

   function xdr_mh_sMessage (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sMessage) return rpc_types_h.bool_t;  -- rt_mh_net.h:437
   pragma Import (C, xdr_mh_sMessage, "xdr_mh_sMessage");

   function xdr_mh_sReturn (arg1 : access rpc_xdr_h.XDR; arg2 : access mh_sReturn) return rpc_types_h.bool_t;  -- rt_mh_net.h:438
   pragma Import (C, xdr_mh_sReturn, "xdr_mh_sReturn");

end rt_mh_net_h;
