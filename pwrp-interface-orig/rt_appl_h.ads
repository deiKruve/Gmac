pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with rt_errh_h;
with rt_qcom_h;
with pwr_h;
with Interfaces.C.Strings;

package rt_appl_h is

  -- 
  -- * Proview   Open Source Process Control.
  -- * Copyright (C) 2005-2012 SSAB EMEA AB.
  -- *
  -- * This file is part of Proview.
  -- *
  -- * This program is free software; you can redistribute it and/or 
  -- * modify it under the terms of the GNU General Public License as 
  -- * published by the Free Software Foundation, either version 2 of 
  -- * the License, or (at your option) any later version.
  -- *
  -- * This program is distributed in the hope that it will be useful 
  -- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
  -- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
  -- * GNU General Public License for more details.
  -- *
  -- * You should have received a copy of the GNU General Public License 
  -- * along with Proview. If not, see <http://www.gnu.org/licenses/>
  -- *
  -- * Linking Proview statically or dynamically with other modules is
  -- * making a combined work based on Proview. Thus, the terms and 
  -- * conditions of the GNU General Public License cover the whole 
  -- * combination.
  -- *
  -- * In addition, as a special exception, the copyright holders of
  -- * Proview give you permission to, from the build function in the
  -- * Proview Configurator, combine Proview with modules generated by the
  -- * Proview PLC Editor to a PLC program, regardless of the license
  -- * terms of these modules. You may copy and distribute the resulting
  -- * combined work under the terms of your choice, provided that every 
  -- * copy of the combined work is accompanied by a complete copy of 
  -- * the source code of Proview (the version used to produce the 
  -- * combined work), being distributed under the terms of the GNU 
  -- * General Public License plus this exception.
  --  

  --! \file rt_appl.h
  --    \brief Contains the rt_appl class.  

  --! \addtogroup rt  
  --@{ 
  --! Baseclass for applications.
  --! rt_appl is a baseclass for applications, where the subclasses should
  --  implement the virtual functions open(), close() and scan().
  -- 

   subtype rt_appl_m_name_array is Interfaces.C.char_array (0 .. 79);
   package Class_rt_appl is
      type rt_appl is tagged limited record
         m_anix : aliased rt_errh_h.errh_eAnix;  -- rt_appl.h:97
         m_scantime : aliased double;  -- rt_appl.h:98
         m_maxdelay : aliased double;  -- rt_appl.h:99
         m_qid : aliased rt_qcom_h.Class_qcom_sQid.qcom_sQid;  -- rt_appl.h:100
         m_name : aliased rt_appl_m_name_array;  -- rt_appl.h:101
         m_apploid : aliased pwr_h.pwr_tOid;  -- rt_appl.h:102
      end record;
      pragma Import (CPP, rt_appl);

      function New_rt_appl
        (name : Interfaces.C.Strings.chars_ptr;
         anix : rt_errh_h.errh_eAnix;
         scantime : double;
         qid : rt_qcom_h.Class_qcom_sQid.qcom_sQid) return rt_appl;  -- rt_appl.h:59
      pragma CPP_Constructor (New_rt_appl, "_ZN7rt_applC1EPKc10errh_eAnixd9qcom_sQid");

      procedure init (this : access rt_appl'Class);  -- rt_appl.h:66
      pragma Import (CPP, init, "_ZN7rt_appl4initEv");

      procedure register_appl (this : access rt_appl'Class; name : Interfaces.C.Strings.chars_ptr);  -- rt_appl.h:68
      pragma Import (CPP, register_appl, "_ZN7rt_appl13register_applEPKc");

      procedure mainloop (this : access rt_appl'Class);  -- rt_appl.h:69
      pragma Import (CPP, mainloop, "_ZN7rt_appl8mainloopEv");

      function scantime (this : access rt_appl'Class) return double;  -- rt_appl.h:70
      pragma Import (CPP, scantime, "_ZN7rt_appl8scantimeEv");

      procedure set_scantime (this : access rt_appl'Class; time : double);  -- rt_appl.h:71
      pragma Import (CPP, set_scantime, "_ZN7rt_appl12set_scantimeEd");

      function apploid (this : access rt_appl'Class) return access pwr_h.pwr_tOid;  -- rt_appl.h:72
      pragma Import (CPP, apploid, "_ZN7rt_appl7apploidEv");

      procedure open (this : access rt_appl);  -- rt_appl.h:80
      pragma Import (CPP, open, "_ZN7rt_appl4openEv");

      procedure close (this : access rt_appl);  -- rt_appl.h:86
      pragma Import (CPP, close, "_ZN7rt_appl5closeEv");

      procedure scan (this : access rt_appl);  -- rt_appl.h:92
      pragma Import (CPP, scan, "_ZN7rt_appl4scanEv");

      procedure Delete_rt_appl (this : access rt_appl);  -- rt_appl.h:94
      pragma Import (CPP, Delete_rt_appl, "_ZN7rt_applD1Ev");

      procedure deleting_dtor (this : access rt_appl);  -- rt_appl.h:94
      pragma Import (CPP, deleting_dtor, "_ZN7rt_applD0Ev");
   end;
   use Class_rt_appl;
  --! Constructor.
  --< Process name.
  --< Application index.
  --< Scantime for call of the scan() function.
  --< Qcom queue identity.
  --! Initialize the application.
  --! The open() function is called after initialization, and may contain setup of 
  --    direct links to objects and attributes in the realtime database. 
  --    The open() function is also called after a soft restart.
  --   

  --! Closes the application.
  --! the close() is called when a restart or stop event is received. It should 
  --    unlink to all direct links.
  --   

  --! Cyclic function.
  --! The scan() function is called cyclic with the scantime specified in the constructor.
  --    In this function all the control and supervision work of the application is placed.
  --   

  --* @}  
end rt_appl_h;
