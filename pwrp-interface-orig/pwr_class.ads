-- 
-- * Proview   Open Source Process Control.
-- * Copyright (C) 2005-2014 SSAB EMEA AB.
-- *
-- * This file is part of Proview.
-- *
-- * This program is free software; you can redistribute it and/or 
-- * modify it under the terms of the GNU General Public License as 
-- * published by the Free Software Foundation, either version 2 of 
-- * the License, or (at your option) any later version.
-- *
-- * This program is distributed in the hope that it will be useful 
-- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
-- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
-- * GNU General Public License for more details.
-- *
-- * You should have received a copy of the GNU General Public License 
-- * along with Proview. If not, see <http://www.gnu.org/licenses/>
-- *
-- * Linking Proview statically or dynamically with other modules is
-- * making a combined work based on Proview. Thus, the terms and 
-- * conditions of the GNU General Public License cover the whole 
-- * combination.
-- *
-- * In addition, as a special exception, the copyright holders of
-- * Proview give you permission to, from the build function in the
-- * Proview Configurator, combine Proview with modules generated by the
-- * Proview PLC Editor to a PLC program, regardless of the license
-- * terms of these modules. You may copy and distribute the resulting
-- * combined work under the terms of your choice, provided that every 
-- * copy of the combined work is accompanied by a complete copy of 
-- * the source code of Proview (the version used to produce the 
-- * combined work), being distributed under the terms of the GNU 
-- * General Public License plus this exception.
--  
--   Ada binding by Jan de Kruijf (jan.de.kruyf@hotmail.com)
--

pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with Interfaces.C.Extensions;
with pwr;

package Pwr_Class is
   
   subtype pwr_eType is unsigned;
   pwr_eType_u_u                  : constant pwr_eType := 98304;
   pwr_eType_Boolean              : constant pwr_eType := 98305;
   pwr_eType_Float32              : constant pwr_eType := 98306;
   pwr_eType_Float64              : constant pwr_eType := 98307;
   pwr_eType_Char                 : constant pwr_eType := 98308;
   pwr_eType_Int8                 : constant pwr_eType := 98309;
   pwr_eType_Int16                : constant pwr_eType := 98310;
   pwr_eType_Int32                : constant pwr_eType := 98311;
   pwr_eType_UInt8                : constant pwr_eType := 98312;
   pwr_eType_UInt16               : constant pwr_eType := 98313;
   pwr_eType_UInt32               : constant pwr_eType := 98314;
   pwr_eType_Objid                : constant pwr_eType := 98315;
   pwr_eType_Buffer               : constant pwr_eType := 98316;
   pwr_eType_String               : constant pwr_eType := 98317;
   pwr_eType_Enum                 : constant pwr_eType := 98318;
   pwr_eType_Struct               : constant pwr_eType := 98319;
   pwr_eType_Mask                 : constant pwr_eType := 98320;
   pwr_eType_Array                : constant pwr_eType := 98321;
   pwr_eType_Time                 : constant pwr_eType := 98322;
   pwr_eType_Text                 : constant pwr_eType := 98323;
   pwr_eType_AttrRef              : constant pwr_eType := 98324;
   pwr_eType_UInt64               : constant pwr_eType := 98325;
   pwr_eType_Int64                : constant pwr_eType := 98326;
   pwr_eType_ClassId              : constant pwr_eType := 98327;
   pwr_eType_TypeId               : constant pwr_eType := 98328;
   pwr_eType_VolumeId             : constant pwr_eType := 98329;
   pwr_eType_ObjectIx             : constant pwr_eType := 98330;
   pwr_eType_RefId                : constant pwr_eType := 98331;
   pwr_eType_DeltaTime            : constant pwr_eType := 98332;
   pwr_eType_Status               : constant pwr_eType := 98333;
   pwr_eType_NetStatus            : constant pwr_eType := 98334;
   pwr_eType_CastId               : constant pwr_eType := 98335;
   pwr_eType_ProString            : constant pwr_eType := 98336;
   pwr_eType_DisableAttr          : constant pwr_eType := 98337;
   pwr_eType_DataRef              : constant pwr_eType := 98338;
   pwr_eType_Void                 : constant pwr_eType := 98339;
   pwr_eType_u                    : constant pwr_eType := 98340;  
   -- pwr_class.h:216
   
   subtype pwr_eClass            is unsigned;
   pwr_eClass_u_u                 : constant pwr_eClass := 65536;
   pwr_eClass_ClassDef            : constant pwr_eClass := 65544;
   pwr_eClass_Type                : constant pwr_eClass := 65552;
   pwr_eClass_TypeDef             : constant pwr_eClass := 65560;
   pwr_eClass_ObjBodyDef          : constant pwr_eClass := 65568;
   pwr_eClass_Param               : constant pwr_eClass := 65576;
   pwr_eClass_Input               : constant pwr_eClass := 65584;
   pwr_eClass_Output              : constant pwr_eClass := 65592;
   pwr_eClass_Intern              : constant pwr_eClass := 65600;
   pwr_eClass_Buffer              : constant pwr_eClass := 65608;
   pwr_eClass_ObjXRef             : constant pwr_eClass := 65616;
   Pwr_EClass_Layout              : constant pwr_eClass := 65624;
   pwr_eClass_Group               : constant pwr_eClass := 65632;
   pwr_eClass_GroupRef            : constant pwr_eClass := 65640;
   Pwr_EClass_TypeHier            : constant pwr_eClass := 65648;
   Pwr_EClass_ClassHier           : constant pwr_eClass := 65656;
   pwr_eClass_ModHier             : constant pwr_eClass := 65664;
   pwr_eClass_PlantHier           : constant pwr_eClass := 65672;
   pwr_eClass_PlcProgram          : constant pwr_eClass := 65680;
   pwr_eClass_PlcWindow           : constant pwr_eClass := 65688;
   pwr_eClass_PlcNode             : constant pwr_eClass := 65696;
   pwr_eClass_PlcConnection       : constant pwr_eClass := 65704;
   pwr_eClass_Point               : constant pwr_eClass := 65712;
   pwr_eClass_GraphPlcProgram     : constant pwr_eClass := 65720;
   Pwr_EClass_GraphPlcWindow      : constant pwr_eClass := 65728;
   Pwr_EClass_GraphPlcNode        : constant pwr_eClass := 65736;
   pwr_eClass_GraphPlcConnection  : constant pwr_eClass := 65744;
   pwr_eClass_PlcPgm              : constant pwr_eClass := 65752;
   pwr_eClass_Hierarchy           : constant pwr_eClass := 65760;
   pwr_eClass_NodeHier            : constant pwr_eClass := 65768;
   pwr_eClass_PgmDef              : constant pwr_eClass := 65776;
   pwr_eClass_Node                : constant pwr_eClass := 65784;
   pwr_eClass_Appl                : constant pwr_eClass := 65792;
   pwr_eClass_System              : constant pwr_eClass := 65800;
   pwr_eClass_LibHier             : constant pwr_eClass := 65808;
   pwr_eClass_DocHier             : constant pwr_eClass := 65816;
   pwr_eClass_AttrXRef            : constant pwr_eClass := 65848;
   pwr_eClass_Menu                : constant pwr_eClass := 65856;
   pwr_eClass_MenuSeparator       : constant pwr_eClass := 65864;
   pwr_eClass_MenuCascade         : constant pwr_eClass := 65872;
   pwr_eClass_MenuButton          : constant pwr_eClass := 65880;
   pwr_eClass_Object              : constant pwr_eClass := 65888;
   pwr_eClass_DbCallBack          : constant pwr_eClass := 65896;
   pwr_eClass_Alias               : constant pwr_eClass := 65904;
   pwr_eClass_RootVolume          : constant pwr_eClass := 65912;
   pwr_eClass_SubVolume           : constant pwr_eClass := 65920;
   pwr_eClass_SharedVolume        : constant pwr_eClass := 65928;
   pwr_eClass_DynamicVolume       : constant pwr_eClass := 65936;
   pwr_eClass_SystemVolume        : constant pwr_eClass := 65944;
   pwr_eClass_ClassVolume         : constant pwr_eClass := 65952;
   pwr_eClass_WorkBenchVolume     : constant pwr_eClass := 65960;
   pwr_eClass_DirectoryVolume     : constant pwr_eClass := 65968;
   pwr_eClass_CreateVolume        : constant pwr_eClass := 65976;
   pwr_eClass_MountVolume         : constant pwr_eClass := 65984;
   pwr_eClass_MountObject         : constant pwr_eClass := 65992;
   pwr_eClass_RtMenu              : constant pwr_eClass := 66000;
   pwr_eClass_VolatileVolume      : constant pwr_eClass := 66008;
   pwr_eClass_MenuRef             : constant pwr_eClass := 66016;
   pwr_eClass_Bit                 : constant pwr_eClass := 66024;
   pwr_eClass_Value               : constant pwr_eClass := 66032;
   pwr_eClass_Method              : constant pwr_eClass := 66040;
   pwr_eClass_RtMethod            : constant pwr_eClass := 66048;
   Pwr_EClass_ExternVolume        : constant pwr_eClass := 66056;
   pwr_eClass_Hier                : constant pwr_eClass := 66064;
   pwr_eClass_ClassLost           : constant pwr_eClass := 66072;
   pwr_eClass_Security            : constant pwr_eClass := 66080;
   pwr_eClass_DetachedClassVolume : constant pwr_eClass := 66088;
   pwr_eClass_u                   : constant pwr_eClass := 66089;  
   -- pwr_class.h:390
   
   type pwr_s_ParInfo;
   subtype pwr_sParInfo  is pwr_s_ParInfo; --- 137

   type pwr_s_ParGraph;
   subtype pwr_sParGraph is pwr_s_ParGraph; -- 140

   
   type pwr_s_AttrXRef;
   subtype pwr_sAttrXRef is pwr_s_AttrXRef; -- 207

   
   type pwr_s_Input;
   subtype Pwr_SInput    is pwr_s_Input;  -- 234

   type pwr_s_Output;
   subtype Pwr_SOutput   is pwr_s_Output; -- 237

   type pwr_s_Intern;
   subtype Pwr_SIntern   is pwr_s_Intern; -- 240

   type pwr_s_ObjXRef;
   subtype Pwr_SObjXRef  is pwr_s_ObjXRef; -- 243
   
   type pwr_s_Buffer;
   subtype pwr_sBuffer   is pwr_s_Buffer; -- 285

   type pwr_s_Param;
   subtype pwr_sParam    is pwr_s_Param; -- 288

   type pwr_s_Node;
   subtype pwr_s_Node_ErrLogTerm_array is Interfaces.C.char_array (0 .. 131);
   subtype pwr_s_Node_ErrLogFile_array is Interfaces.C.char_array (0 .. 131);
   type pwr_s_Node_ProcStatus_array is 
     array (0 .. 79) of aliased pwr.pwr_tStatus;
   type pwr_s_Node_ProcMsgSeverity_array is 
     array (0 .. 79) of aliased pwr.pwr_tStatus;
   type pwr_s_Node_ProcMessage_array is 
     array (0 .. 79, 0 .. 79) of aliased char;
   type pwr_s_Node_ProcObject_array is 
     array (0 .. 79) of aliased pwr.pwr_tOid;
   type pwr_s_Node_ProcTimeStamp_array is 
     array (0 .. 79) of aliased pwr.pwr_tTime;
   
   subtype pwr_sNode is pwr_s_Node; -- 301
   
   type pwr_s_Bit;
   subtype Pwr_SBit      is pwr_s_Bit; -- 377
   
   type pwr_s_Value;
   subtype pwr_sValue    is pwr_s_Value; -- 379
   
   type pwr_s_Security;
   subtype pwr_sSecurity is pwr_s_Security; -- 387
   
   type pwr_u_ParDef; -- 390
   subtype pwr_uParDef   is pwr_u_ParDef;
   -- The union pwr_uParDef contains all classes defining parameters.   
   
   type Pwr_EXRefType    is 
     (pwr_eXRefType_u_u,
      pwr_eXRefType_u);
   pragma Convention (C, pwr_eXRefType);  -- pwr_class.h:430

   ---------------------------------------------------------------------------
   -- Parameter defining classes.                                           --
   --                                                                       --
   -- This section defines the classes to be used when defining parameters  --
   -- in classes.                                                           --
   --                                                                       --
   -- At the end of this section is a union: pwr_uPar, wich must be updated --
   -- for each new parameter class defined.                                 --
   ---------------------------------------------------------------------------
   
   
   type pwr_s_ParGraph   is 
      record
	 GraphName    : aliased pwr.pwr_tGraphName;
	 InputType    : aliased pwr.pwr_tUInt32; 
	 NiNaAnnot    : aliased pwr.pwr_tUInt32; 
	 NiNaCond     : aliased pwr.pwr_tBoolean;
	 NiNaSegments : aliased pwr.pwr_tBoolean;
	 DebAnnot     : aliased pwr.pwr_tUInt32; 
	 ConPointNr   : aliased pwr.pwr_tUInt32; 
      end record;
   -- This class is used to define graphic appearence of parameters.
   pragma Convention (C_Pass_By_Copy, pwr_s_ParGraph);  -- pwr_class.h:592

  -- Name to be used in program.  
   type pwr_s_ParInfo     is 
      record
	 PgmName    : aliased pwr.pwr_tPgmName; 
	 --  Name to be used in program.
	 c_Type     : aliased pwr_eType;  
	 -- Compiled system type.
	 Offset     : aliased pwr.pwr_tUInt32;
	 -- Compiled offset in body.
	 Size       : aliased pwr.pwr_tUInt32;
	 -- Compiled size, number of bytes.
	 Flags      : aliased pwr.pwr_tUInt32;
	 -- Parameter flags
	 Elements   : aliased pwr.pwr_tUInt32;
	 -- If array; number of rows.
	 ParamIndex : aliased pwr.pwr_tUInt32;
	 -- Index of param within a body.
      end record;
   -- This class is used to define information about parameters.   
   pragma Convention (C_Pass_By_Copy, pwr_s_ParInfo);  -- pwr_class.h:605

   
   type pwr_s_Param      is 
      record
	 Info    : aliased pwr_sParInfo;
	 TypeRef : aliased pwr.pwr_tTypeId;
	 -- Reference to the object defining the type.
	 Filler  : aliased pwr.pwr_tInt32;
	 -- LongWord size alignment 
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_s_Param);  -- pwr_class.h:776

   type pwr_s_Intern     is 
      record
	 Info    : aliased pwr_sParInfo;
	 TypeRef : aliased Pwr.pwr_tTypeId;
	 -- Reference to the object defining the type.
	 Graph   : aliased pwr_sParGraph;
	 -- Used by graphic editor. 
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_s_Intern);  -- pwr_class.h:783

  -- Reference to the object defining

   type pwr_s_Input      is 
      record
	 Info    : aliased pwr_sParInfo; 
	 TypeRef : aliased pwr.pwr_tTypeId;
	 -- Reference to the object defining the type.
	 Graph   : aliased pwr_sParGraph; 
	 -- Used by graphic editor. 
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_s_Input);  -- pwr_class.h:790

   type pwr_s_Output     is 
      record
	 Info    : aliased pwr_sParInfo;
	 TypeRef : aliased pwr.pwr_tTypeId;
	 -- Reference to the object defining the type.
	 Graph   : aliased pwr_sParGraph;
	 -- Used by graphic editor. 
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_s_Output);  -- pwr_class.h:797

   type pwr_s_AttrXRef    is 
      record
	 Info     : aliased pwr_sParInfo; 
	 Identity : aliased pwr.pwr_tXRef;
	 -- A name to identify a cross reference. 
	 Source   : aliased pwr.pwr_tXRef;
	 Target   : aliased pwr.pwr_tXRef;
	 XRefType : aliased pwr_eXRefType;  
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_s_AttrXRef);  -- pwr_class.h:811
   
   type pwr_s_ObjXRef      is 
      record
	 Info            : aliased pwr_sParInfo; 
	 Identity        : aliased pwr.pwr_tXRef;
	 -- A name to identify a cross reference.
	 Source          : aliased pwr.pwr_tXRef;
	 Target          : aliased pwr.pwr_tXRef;
	 XRefType        : aliased pwr_eXRefType;  
	 SourceAttribute : aliased pwr.pwr_tObjName;
	 TargetAttribute : aliased pwr.pwr_tObjName;
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_s_ObjXRef);  -- pwr_class.h:813

   type pwr_s_Buffer        is 
      record
	 Info  : aliased pwr_sParInfo;
	 Class : aliased pwr_eClass; 
	 -- The system class defining the data stored here.
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_s_Buffer);  -- pwr_class.h:824

   
   type pwr_u_ParDef (discr : unsigned := 0) is 
      record
	 case discr is
	    when 0      =>
	       Input    : aliased pwr_sInput;
	    when 1      =>
	       Output   : aliased pwr_sOutput;
	    when 2      =>
	       Intern   : aliased pwr_sIntern;
	    when 3      =>
	       ObjXRef  : aliased pwr_sObjXRef;
	    when 4      =>
	       AttrXRef : aliased pwr_sAttrXRef;
	    when 5      =>
	       Buffer   : aliased pwr_sBuffer;  
	    when others =>
	       Param    : aliased pwr_sParam;
	 end case;
      end record;
   -- The union pwr_uParDef contains all classes defining parameters. 
   pragma Convention (C_Pass_By_Copy, pwr_u_ParDef);
   pragma Unchecked_Union (pwr_u_ParDef);  -- pwr_class.h:840
   
   type pwr_s_Bit        is 
      record
	 Text    : aliased pwr.pwr_tString80;
	 PgmName : aliased pwr.pwr_tString32;
	 Value   : aliased pwr.pwr_tUInt32;
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_s_Bit);  -- pwr_class.h:842
   
   type pwr_s_Value      is 
      record
	 Text    : aliased pwr.pwr_tString80;
	 PgmName : aliased pwr.pwr_tString32;
	 Value   : aliased pwr.pwr_tInt32; 
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_s_Value);  -- pwr_class.h:848
   
   type pwr_s_Node is 
      record
	 Description       : aliased pwr.pwr_tString80; 
	 ErrLogTerm        : aliased pwr_s_Node_ErrLogTerm_array; 
	 ErrLogFile        : aliased pwr_s_Node_ErrLogFile_array;
	 BootTime          : aliased pwr.pwr_tTime; 
	 BootVersion       : aliased pwr.pwr_tTime;
	 BootPlcVersion    : aliased pwr.pwr_tProjVersion; 
	 CurrentVersion    : aliased pwr.pwr_tTime;
	 CurrentPlcVersion : aliased pwr.pwr_tProjVersion;
	 Restarts          : aliased pwr.pwr_tUInt32;
	 RestartTime       : aliased pwr.pwr_tTime;
	 RestartStallTime  : aliased pwr.pwr_tDeltaTime;
	 SystemTime        : aliased pwr.pwr_tTime;
	 SystemStatus      : aliased pwr.pwr_tNetStatus;
	 ProcStatus        : aliased pwr_s_Node_ProcStatus_array;
	 ProcMsgSeverity   : aliased pwr_s_Node_ProcMsgSeverity_array;
	 ProcMessage       : aliased pwr_s_Node_ProcMessage_array;
	 ProcObject        : aliased pwr_s_Node_ProcObject_array;
	 ProcTimeStamp     : aliased pwr_s_Node_ProcTimeStamp_array;
	 EmergBreakTrue    : aliased pwr.pwr_tBoolean; 
	 EmergBreakSelect  : aliased pwr.pwr_tUInt32;
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_s_Node);  -- pwr_class.h:1061

   
   type pwr_s_Security   is 
      record
	 DefaultWebPriv  : aliased pwr.pwr_tMask;  -- pwr_class.h:1245
	 DefaultXttPriv  : aliased pwr.pwr_tMask;  -- pwr_class.h:1246
	 XttUseOpsysUser : aliased pwr.pwr_tBoolean;  -- pwr_class.h:1247
	 WebSystemGroup  : aliased pwr.pwr_tString80;  -- pwr_class.h:1248
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_s_Security);  -- pwr_class.h:1244


end Pwr_Class;
