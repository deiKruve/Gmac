pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with System;
with pwr;
--with pwr_class_h;
--limited with pwr_baseclasses_h;
--with rt_io_supervise_h;

package rt_io_base_h is


   io_cLibDummy : constant := -9999;  --  rt_io_base.h:74
   IO_CHANLIST_SIZE : constant := 250;  --  rt_io_base.h:75

   FIXOUT : constant := 2;  --  rt_io_base.h:77
   IO_REBOOT : constant := 1;  --  rt_io_base.h:78

  -- 
  -- * Proview   Open Source Process Control.
  -- * Copyright (C) 2005-2014 SSAB EMEA AB.
  -- *
  -- * This file is part of Proview.
  -- *
  -- * This program is free software; you can redistribute it and/or 
  -- * modify it under the terms of the GNU General Public License as 
  -- * published by the Free Software Foundation, either version 2 of 
  -- * the License, or (at your option) any later version.
  -- *
  -- * This program is distributed in the hope that it will be useful 
  -- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
  -- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
  -- * GNU General Public License for more details.
  -- *
  -- * You should have received a copy of the GNU General Public License 
  -- * along with Proview. If not, see <http://www.gnu.org/licenses/>
  -- *
  -- * Linking Proview statically or dynamically with other modules is
  -- * making a combined work based on Proview. Thus, the terms and 
  -- * conditions of the GNU General Public License cover the whole 
  -- * combination.
  -- *
  -- * In addition, as a special exception, the copyright holders of
  -- * Proview give you permission to, from the build function in the
  -- * Proview Configurator, combine Proview with modules generated by the
  -- * Proview PLC Editor to a PLC program, regardless of the license
  -- * terms of these modules. You may copy and distribute the resulting
  -- * combined work under the terms of your choice, provided that every 
  -- * copy of the combined work is accompanied by a complete copy of 
  -- * the source code of Proview (the version used to produce the 
  -- * combined work), being distributed under the terms of the GNU 
  -- * General Public License plus this exception.
  --  

  -- rt_io_base.h -- includefile for io base.  
   type io_tCtx is new System.Address;  -- rt_io_base.h:59

   io_writeerr : aliased pwr_h.pwr_tBoolean;  -- rt_io_base.h:80
   pragma Import (C, io_writeerr, "io_writeerr");

   io_readerr : aliased pwr_h.pwr_tBoolean;  -- rt_io_base.h:81
   pragma Import (C, io_readerr, "io_readerr");

   io_fatal_error : aliased pwr_h.pwr_tBoolean;  -- rt_io_base.h:82
   pragma Import (C, io_fatal_error, "io_fatal_error");

   type io_eType is 
     (io_eType_Node,
      io_eType_Agent,
      io_eType_Rack,
      io_eType_Card);
   pragma Convention (C, io_eType);  -- rt_io_base.h:90

   subtype io_mAction is unsigned;
   io_mAction_None : constant io_mAction := 0;
   io_mAction_Read : constant io_mAction := 1;
   io_mAction_Write : constant io_mAction := 2;
   io_mAction_Swap : constant io_mAction := 4;  -- rt_io_base.h:97

   subtype io_mProcess is unsigned;
   io_mProcess_None : constant io_mProcess := 0;
   io_mProcess_Plc : constant io_mProcess := 1;
   io_mProcess_IoComm : constant io_mProcess := 2;
   io_mProcess_Profibus : constant io_mProcess := 4;
   io_mProcess_User : constant io_mProcess := 8;
   io_mProcess_User2 : constant io_mProcess := 16;
   io_mProcess_User3 : constant io_mProcess := 32;
   io_mProcess_User4 : constant io_mProcess := 64;
   io_mProcess_Powerlink : constant io_mProcess := 128;
   io_mProcess_All : constant io_mProcess := -1;  -- rt_io_base.h:110

   type io_eEvent is 
     (io_eEvent_EmergencyBreak,
      io_eEvent_IoCommEmergencyBreak,
      io_eEvent_IoCommSwapInit,
      io_eEvent_IoCommSwap);
   pragma Convention (C, io_eEvent);  -- rt_io_base.h:117

  -- Pointer to channel object  
   type io_sChannel is record
      cop : System.Address;  -- rt_io_base.h:120
      ChanDlid : aliased pwr_h.pwr_tDlid;  -- rt_io_base.h:121
      ChanAref : aliased pwr_h.pwr_sAttrRef;  -- rt_io_base.h:122
      sop : System.Address;  -- rt_io_base.h:123
      SigDlid : aliased pwr_h.pwr_tDlid;  -- rt_io_base.h:124
      SigAref : aliased pwr_h.pwr_sAttrRef;  -- rt_io_base.h:125
      vbp : System.Address;  -- rt_io_base.h:126
      abs_vbp : System.Address;  -- rt_io_base.h:127
      ChanClass : aliased pwr_h.pwr_tClassId;  -- rt_io_base.h:128
      SigClass : aliased pwr_h.pwr_tClassId;  -- rt_io_base.h:129
      size : aliased pwr_h.pwr_tUInt32;  -- rt_io_base.h:130
      offset : aliased pwr_h.pwr_tUInt32;  -- rt_io_base.h:131
      mask : aliased pwr_h.pwr_tUInt32;  -- rt_io_base.h:132
      SigType : aliased pwr_class_h.pwr_eType;  -- rt_io_base.h:133
      SigElem : aliased pwr_h.pwr_tUInt32;  -- rt_io_base.h:134
      SigStrSize : aliased pwr_h.pwr_tUInt32;  -- rt_io_base.h:135
      udata : aliased pwr_h.pwr_tUInt32;  -- rt_io_base.h:136
   end record;
   pragma Convention (C_Pass_By_Copy, io_sChannel);  -- rt_io_base.h:137

   --  skipped anonymous struct anon_1034

  -- Dlid for pointer to channel  
  -- AttrRef for channel  
  -- Pointer to signal object  
  -- Dlid for pointer to signal  
  -- AttrRef for signal  
  -- Pointer to valuebase for signal  
  -- Pointer to absvaluebase (Co only)  
  -- Class of channel object  
  -- Class of signal object  
  -- Size of channel in byte  
  -- Offset to channel in card  
  -- Mask for bit oriented channels  
  -- Type of buffer signal  
  -- Elements of buffer array signal  
  -- Size of buffer signal element  
  -- User defined data  
  -- Class of card object  
   type s_Card is record
      Class : aliased pwr_h.pwr_tClassId;  -- rt_io_base.h:141
      Objid : aliased pwr_h.pwr_tObjid;  -- rt_io_base.h:142
      Name : aliased pwr_h.pwr_tOName;  -- rt_io_base.h:143
      Action : aliased io_mAction;  -- rt_io_base.h:144
      Process : aliased io_mProcess;  -- rt_io_base.h:145
      Init : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:146
      Close : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:147
      Read : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:148
      Write : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:149
      Swap : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:150
      op : System.Address;  -- rt_io_base.h:151
      Dlid : aliased pwr_h.pwr_tDlid;  -- rt_io_base.h:152
      size : aliased pwr_h.pwr_tUInt32;  -- rt_io_base.h:153
      offset : aliased pwr_h.pwr_tUInt32;  -- rt_io_base.h:154
      scan_interval : aliased int;  -- rt_io_base.h:155
      scan_interval_cnt : aliased int;  -- rt_io_base.h:156
      AgentControlled : aliased int;  -- rt_io_base.h:157
      ChanListSize : aliased int;  -- rt_io_base.h:158
      chanlist : access io_sChannel;  -- rt_io_base.h:159
      Local : System.Address;  -- rt_io_base.h:160
      MethodDisabled : aliased int;  -- rt_io_base.h:161
      next : access s_Card;  -- rt_io_base.h:162
   end record;
   pragma Convention (C_Pass_By_Copy, s_Card);  -- rt_io_base.h:140

  -- Objid of card object  
  -- Full name of card object  
  -- Type of method defined (Read/Write) 
  -- Process number  
  -- Init method  
  -- Close method  
  -- Read method  
  -- Write method  
  -- Swap method  
  -- Pointer to card object  
  -- Dlid for card object pointer  
  -- Size of card data area in byte  
  -- Offset to card data area in rack  
  -- Interval between scans  
  -- Counter to detect next time to scan  
  -- TRUE if kontrolled by agent  
  -- Size of chanlist  
  -- Array of channel structures  
  -- Pointer to method defined data structure  
  -- Card method disabled  
  -- Next card  
   subtype io_sCard is s_Card;

  -- Class of rack object  
   type s_Rack is record
      Class : aliased pwr_h.pwr_tClassId;  -- rt_io_base.h:166
      Objid : aliased pwr_h.pwr_tObjid;  -- rt_io_base.h:167
      Name : aliased pwr_h.pwr_tOName;  -- rt_io_base.h:168
      Action : aliased io_mAction;  -- rt_io_base.h:169
      Process : aliased io_mProcess;  -- rt_io_base.h:170
      Init : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:171
      Close : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:172
      Read : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:173
      Write : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:174
      Swap : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:175
      op : System.Address;  -- rt_io_base.h:176
      Dlid : aliased pwr_h.pwr_tDlid;  -- rt_io_base.h:177
      size : aliased pwr_h.pwr_tUInt32;  -- rt_io_base.h:178
      offset : aliased pwr_h.pwr_tUInt32;  -- rt_io_base.h:179
      scan_interval : aliased int;  -- rt_io_base.h:180
      scan_interval_cnt : aliased int;  -- rt_io_base.h:181
      AgentControlled : aliased int;  -- rt_io_base.h:182
      cardlist : access io_sCard;  -- rt_io_base.h:183
      Local : System.Address;  -- rt_io_base.h:184
      MethodDisabled : aliased int;  -- rt_io_base.h:185
      next : access s_Rack;  -- rt_io_base.h:186
   end record;
   pragma Convention (C_Pass_By_Copy, s_Rack);  -- rt_io_base.h:165

  -- Objid of rack object  
  -- Full name of rack object  
  -- Type of method defined (Read/Write) 
  -- Process number  
  -- Init method  
  -- Close method  
  -- Read method  
  -- Write method  
  -- Swap method  
  -- Pointer to rack object  
  -- Dlid för rack object pointer  
  -- Size of rack data area in byte  
  -- Offset to rack data area in agent  
  -- Interval between scans  
  -- Counter to detect next time to scan  
  -- TRUE if kontrolled by agent  
  -- List of card structures  
  -- Pointer to method defined data structure  
  -- Rack method disabled  
  -- Next rack  
   subtype io_sRack is s_Rack;

  -- Class of agent object  
   type s_Agent is record
      Class : aliased pwr_h.pwr_tClassId;  -- rt_io_base.h:190
      Objid : aliased pwr_h.pwr_tObjid;  -- rt_io_base.h:191
      Name : aliased pwr_h.pwr_tOName;  -- rt_io_base.h:192
      Action : aliased io_mAction;  -- rt_io_base.h:193
      Process : aliased io_mProcess;  -- rt_io_base.h:194
      Init : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:195
      Close : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:196
      Read : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:197
      Write : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:198
      Swap : access function return pwr_h.pwr_tStatus;  -- rt_io_base.h:199
      op : System.Address;  -- rt_io_base.h:200
      Dlid : aliased pwr_h.pwr_tDlid;  -- rt_io_base.h:201
      scan_interval : aliased int;  -- rt_io_base.h:202
      scan_interval_cnt : aliased int;  -- rt_io_base.h:203
      racklist : access io_sRack;  -- rt_io_base.h:204
      Local : System.Address;  -- rt_io_base.h:205
      next : access s_Agent;  -- rt_io_base.h:206
   end record;
   pragma Convention (C_Pass_By_Copy, s_Agent);  -- rt_io_base.h:189

  -- Objid of agent object  
  -- Full name of agent object  
  -- Type of method defined (Read/Write) 
  -- Process number  
  -- Init method  
  -- Close method  
  -- Read method  
  -- Write method  
  -- Swap method  
  -- Pointer to agent object  
  -- Dlid for agent object pointer  
  -- Interval between scans  
  -- Counter to detect next time to scan  
  -- List of rack structures  
  -- Pointer to method defined data structure  
  -- Next agent  
   subtype io_sAgent is s_Agent;

  -- List of agent structures  
   type io_sCtx is record
      agentlist : access io_sAgent;  -- rt_io_base.h:210
      Process : aliased io_mProcess;  -- rt_io_base.h:211
      Thread : aliased pwr_h.pwr_tObjid;  -- rt_io_base.h:212
      RelativVector : aliased int;  -- rt_io_base.h:213
      Node : access pwr_class_h.pwr_sNode;  -- rt_io_base.h:214
      IOHandler : access pwr_baseclasses_h.pwr_sClass_IOHandler;  -- rt_io_base.h:215
      ScanTime : aliased float;  -- rt_io_base.h:216
      SupCtx : rt_io_supervise_h.io_tSupCtx;  -- rt_io_base.h:217
   end record;
   pragma Convention (C_Pass_By_Copy, io_sCtx);  -- rt_io_base.h:209

  -- Callers process number  
  -- Callers thread objid  
  -- Used by plc  
  -- Pointer to node object  
  -- Pointer to IO Handler object  
  -- Scantime supplied by caller  
  -- Context for supervise object lists  
  ------------------------------------------------------------------------------*  Io functions
  --s
  --\*---------------------------------------------------------------------------- 

   procedure io_DiUnpackWord
     (cp : access io_sCard;
      data : pwr_h.pwr_tUInt16;
      mask : pwr_h.pwr_tUInt16;
      index : int);  -- rt_io_base.h:224
   pragma Import (C, io_DiUnpackWord, "io_DiUnpackWord");

   procedure io_DoPackWord
     (cp : access io_sCard;
      data : access pwr_h.pwr_tUInt16;
      index : int);  -- rt_io_base.h:231
   pragma Import (C, io_DoPackWord, "io_DoPackWord");

   function io_init
     (process : io_mProcess;
      thread : pwr_h.pwr_tObjid;
      ctx : System.Address;
      relativ_vector : int;
      scan_time : float) return pwr_h.pwr_tStatus;  -- rt_io_base.h:237
   pragma Import (C, io_init, "io_init");

   function io_init_swap
     (process : io_mProcess;
      thread : pwr_h.pwr_tObjid;
      ctx : System.Address;
      relativ_vector : int;
      scan_time : float) return pwr_h.pwr_tStatus;  -- rt_io_base.h:245
   pragma Import (C, io_init_swap, "io_init_swap");

   function io_read (ctx : io_tCtx) return pwr_h.pwr_tStatus;  -- rt_io_base.h:253
   pragma Import (C, io_read, "io_read");

   function io_write (ctx : io_tCtx) return pwr_h.pwr_tStatus;  -- rt_io_base.h:257
   pragma Import (C, io_write, "io_write");

   function io_swap (ctx : io_tCtx; event : io_eEvent) return pwr_h.pwr_tStatus;  -- rt_io_base.h:261
   pragma Import (C, io_swap, "io_swap");

   function io_close (ctx : io_tCtx) return pwr_h.pwr_tStatus;  -- rt_io_base.h:266
   pragma Import (C, io_close, "io_close");

   function io_AiRangeToCoef (chanp : access io_sChannel) return pwr_h.pwr_tStatus;  -- rt_io_base.h:270
   pragma Import (C, io_AiRangeToCoef, "io_AiRangeToCoef");

   function io_BiRangeToCoef (chanp : access io_sChannel) return pwr_h.pwr_tStatus;  -- rt_io_base.h:274
   pragma Import (C, io_BiRangeToCoef, "io_BiRangeToCoef");

   function io_AoRangeToCoef (chanp : access io_sChannel) return pwr_h.pwr_tStatus;  -- rt_io_base.h:278
   pragma Import (C, io_AoRangeToCoef, "io_AoRangeToCoef");

   function io_BoRangeToCoef (chanp : access io_sChannel) return pwr_h.pwr_tStatus;  -- rt_io_base.h:282
   pragma Import (C, io_BoRangeToCoef, "io_BoRangeToCoef");

   procedure io_ConvertAi
     (cop : access pwr_baseclasses_h.pwr_sClass_ChanAi;
      rawvalue : pwr_h.pwr_tInt16;
      actvalue_p : access pwr_h.pwr_tFloat32);  -- rt_io_base.h:286
   pragma Import (C, io_ConvertAi, "io_ConvertAi");

   procedure io_ConvertAi32
     (cop : access pwr_baseclasses_h.pwr_sClass_ChanAi;
      rawvalue : pwr_h.pwr_tInt32;
      actvalue_p : access pwr_h.pwr_tFloat32);  -- rt_io_base.h:292
   pragma Import (C, io_ConvertAi32, "io_ConvertAi32");

   procedure io_ConvertAit
     (cop : access pwr_baseclasses_h.pwr_sClass_ChanAit;
      rawvalue : pwr_h.pwr_tInt16;
      actvalue_p : access pwr_h.pwr_tFloat32);  -- rt_io_base.h:298
   pragma Import (C, io_ConvertAit, "io_ConvertAit");

   function io_init_signals return pwr_h.pwr_tStatus;  -- rt_io_base.h:304
   pragma Import (C, io_init_signals, "io_init_signals");

   function io_get_iohandler_object (ObjPtr : System.Address; oid : access pwr_h.pwr_tObjid) return pwr_h.pwr_tStatus;  -- rt_io_base.h:308
   pragma Import (C, io_get_iohandler_object, "io_get_iohandler_object");

   function io_GetIoTypeClasses
     (c_type : io_eType;
      classes : System.Address;
      size : access int) return pwr_h.pwr_tStatus;  -- rt_io_base.h:313
   pragma Import (C, io_GetIoTypeClasses, "io_GetIoTypeClasses");

   function io_CheckClassIoType (c_type : io_eType; cid : pwr_h.pwr_tCid) return int;  -- rt_io_base.h:319
   pragma Import (C, io_CheckClassIoType, "io_CheckClassIoType");

   procedure io_methods_print;  -- rt_io_base.h:324
   pragma Import (C, io_methods_print, "io_methods_print");

end rt_io_base_h;
