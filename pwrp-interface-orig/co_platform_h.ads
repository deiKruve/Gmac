pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with Interfaces.C.Extensions;
with pwr_h;

package co_platform_h is

   --  unsupported macro: LASTUNSIGNED ((u_int)0-1)
   --  arg-macro: function IBYTE0 (i)
   --    return (i >> 16#18#) and 16#000000ff#;
   --  arg-macro: function IBYTE1 (i)
   --    return (i >> 16#08#) and 16#0000ff00#;
   --  arg-macro: function IBYTE2 (i)
   --    return (i << 16#08#) and 16#00ff0000#;
   --  arg-macro: function IBYTE3 (i)
   --    return (i << 16#18#) and 16#ff000000#;
   --  arg-macro: procedure ENDIAN_SWAP_INT (t, s)
   --    {int i := *(int *)s; *(int *)t := (IBYTE0(i) or IBYTE1(i) or IBYTE2(i) or IBYTE3(i));}
   --  arg-macro: function SBYTE0 (s)
   --    return (s >> 16#08#) and 16#00ff#;
   --  arg-macro: function SBYTE1 (s)
   --    return (s << 16#08#) and 16#ff00#;
   --  arg-macro: procedure ENDIAN_SWAP_SHORT (t, s)
   --    {short int i := *(short *)s; *(short *)t := (SBYTE0(i) or SBYTE1(i));}
   --  arg-macro: function IBYTEP0 (s)
   --    return ((*(int *)s) >> 16#18#) and 16#000000ff#;
   --  arg-macro: function IBYTEP1 (s)
   --    return ((*(int *)s) >> 16#08#) and 16#0000ff00#;
   --  arg-macro: function IBYTEP2 (s)
   --    return ((*(int *)s) << 16#08#) and 16#00ff0000#;
   --  arg-macro: function IBYTEP3 (s)
   --    return ((*(int *)s) << 16#18#) and 16#ff000000#;
   --  arg-macro: function ENDIAN_SWAP_INTP (s)
   --    return *(int *)s := (IBYTEP0(s) or IBYTEP1(s) or IBYTEP2(s) or IBYTEP3(s));
   --  arg-macro: function SBYTEP0 (s)
   --    return ((*(short *)s) >> 16#08#) and 16#00ff#;
   --  arg-macro: function SBYTEP1 (s)
   --    return ((*(short *)s) << 16#08#) and 16#ff00#;
   --  arg-macro: function ENDIAN_SWAP_SHORTP (s)
   --    return *(short *)s := (SBYTEP0(s) or SBYTEP1(s));
   --  arg-macro: function ENDIAN_SWAP_BOOLP (s)
   --    return *(int *)s := (0 /= *(int *)s);
   --  unsupported macro: co_dHostOS co_eOS__
   --  unsupported macro: co_dHostHW co_eHW__
   --  unsupported macro: co_dHostByteOrder co_eBO_little
   --  unsupported macro: co_dHostAsciiType co_eCT_ascii
   --  unsupported macro: co_dHostFloatType co_eFT_ieeeS
  --* 
  -- * Proview   Open Source Process Control.
  -- * Copyright (C) 2005-2014 SSAB EMEA AB.
  -- *
  -- * This file is part of Proview.
  -- *
  -- * This program is free software; you can redistribute it and/or 
  -- * modify it under the terms of the GNU General Public License as 
  -- * published by the Free Software Foundation, either version 2 of 
  -- * the License, or (at your option) any later version.
  -- *
  -- * This program is distributed in the hope that it will be useful 
  -- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
  -- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
  -- * GNU General Public License for more details.
  -- *
  -- * You should have received a copy of the GNU General Public License 
  -- * along with Proview. If not, see <http://www.gnu.org/licenses/>
  -- *
  -- * Linking Proview statically or dynamically with other modules is
  -- * making a combined work based on Proview. Thus, the terms and 
  -- * conditions of the GNU General Public License cover the whole 
  -- * combination.
  -- *
  -- * In addition, as a special exception, the copyright holders of
  -- * Proview give you permission to, from the build function in the
  -- * Proview Configurator, combine Proview with modules generated by the
  -- * Proview PLC Editor to a PLC program, regardless of the license
  -- * terms of these modules. You may copy and distribute the resulting
  -- * combined work under the terms of your choice, provided that every 
  -- * copy of the combined work is accompanied by a complete copy of 
  -- * the source code of Proview (the version used to produce the 
  -- * combined work), being distributed under the terms of the GNU 
  -- * General Public License plus this exception.
  -- * 

  -- co_platform.h -- platform routines
  --   This module contains data structures that descibes a PROVIEW platform  
  --    

  --* OS type
  -- * @note Do not change the order. Must be backward compatible
  --  

  --*< Pay me and I will do it  
  --*< Never!!  
  --*< We are working on it ;-)  
   type co_eOS is 
     (co_eOS_u_u,
      co_eOS_Lynx,
      co_eOS_VMS,
      co_eOS_ELN,
      co_eOS_WNT,
      co_eOS_W95,
      co_eOS_Amiga,
      co_eOS_Linux,
      co_eOS_MacOS,
      co_eOS_FreeBSD,
      co_eOS_OpenBSD,
      co_eOS_Cygwin,
      co_eOS_u);
   pragma Convention (C, co_eOS);  -- co_platform.h:107

  --* Hardware type 
  --  * @note Do not change the order. Must be backward compatible
  --   

   type co_eHW is 
     (co_eHW_u_u,
      co_eHW_x86,
      co_eHW_68k,
      co_eHW_VAX,
      co_eHW_Alpha,
      co_eHW_PPC,
      co_eHW_x86_64,
      co_eHW_ARM,
      co_eHW_u);
   pragma Convention (C, co_eHW);  -- co_platform.h:146

  --* Integer and floating-point byte order.
  -- *
  -- *  Network is big    endian
  -- *  68k     is big    endian
  -- *  x86     is little endian
  -- *  PPC     is both   endian
  -- *  VAX     is little endian
  -- *
  -- * @note Do not change the order. Must be backward compatible
  --  

  --*< Not used, historical reasons  
   type co_eBO is 
     (co_eBO_u_u,
      co_eBO_big,
      co_eBO_little,
      co_eBO_middle);
   pragma Convention (C, co_eBO);  -- co_platform.h:181

  --* Character representation type. Always set to ascii
  -- *
  -- *  @note The enum must not exceed 15 
  --  

   type co_eCT is 
     (co_eCT_u_u,
      co_eCT_ascii,
      co_eCT_u);
   pragma Convention (C, co_eCT);  -- co_platform.h:199

  --* Floating-point representation type.
  -- *
  -- * @note Do not change the order. Must be backward compatible
  --  

  --*< Not used  
  --*< Not used  
  --*< Both for Alpha and VAX (float)  
  --*< Never set, there are no support for double  
  --*< Never set, there are no support for double  
  --*< Not used  
   type co_eFT is 
     (co_eFT_u_u,
      co_eFT_ieeeS,
      co_eFT_ieeeT,
      co_eFT_ieeeK,
      co_eFT_vaxF,
      co_eFT_vaxD,
      co_eFT_vaxG,
      co_eFT_vaxH,
      co_eFT_u);
   pragma Convention (C, co_eFT);  -- co_platform.h:219

   type co_mFormat;
   type anon_20 is record
      bo : Extensions.Unsigned_4;  -- co_platform.h:234
      ct : Extensions.Unsigned_4;  -- co_platform.h:234
      ft : aliased unsigned_char;  -- co_platform.h:234
      reserved1 : aliased unsigned_char;  -- co_platform.h:234
      reserved2 : aliased unsigned_char;  -- co_platform.h:234
   end record;
   pragma Convention (C_Pass_By_Copy, anon_20);
   type co_mFormat (discr : unsigned := 0) is record
      case discr is
         when 0 =>
            m : aliased pwr_h.pwr_tBitMask;  -- co_platform.h:233
         when others =>
            b : aliased anon_20;  -- co_platform.h:240
      end case;
   end record;
   pragma Convention (C_Pass_By_Copy, co_mFormat);
   pragma Unchecked_Union (co_mFormat);  -- co_platform.h:242

   --  skipped anonymous struct anon_19

  --*< Byte order  
  --*< Not used. Character representation  
  --*< Floting-point representation  
   type co_sPlatform is record
      os : aliased co_eOS;  -- co_platform.h:246
      hw : aliased co_eHW;  -- co_platform.h:247
      bo : aliased co_eBO;  -- co_platform.h:248
      ft : aliased co_eFT;  -- co_platform.h:249
   end record;
   pragma Convention (C_Pass_By_Copy, co_sPlatform);  -- co_platform.h:250

   --  skipped anonymous struct anon_21

   function co_GetOwnFormat (format : access co_mFormat) return access co_mFormat;  -- co_platform.h:252
   pragma Import (C, co_GetOwnFormat, "co_GetOwnFormat");

   function co_GetOwnPlatform (platform : access co_sPlatform) return access co_sPlatform;  -- co_platform.h:253
   pragma Import (C, co_GetOwnPlatform, "co_GetOwnPlatform");

   function co_SetFormat
     (format : access co_mFormat;
      bo : co_eBO;
      ft : co_eFT) return access co_mFormat;  -- co_platform.h:254
   pragma Import (C, co_SetFormat, "co_SetFormat");

end co_platform_h;
