-- 
-- * Proview   Open Source Process Control.
-- * Copyright (C) 2005-2014 SSAB EMEA AB.
-- *
-- * This file is part of Proview.
-- *
-- * This program is free software; you can redistribute it and/or 
-- * modify it under the terms of the GNU General Public License as 
-- * published by the Free Software Foundation, either version 2 of 
-- * the License, or (at your option) any later version.
-- *
-- * This program is distributed in the hope that it will be useful 
-- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
-- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
-- * GNU General Public License for more details.
-- *
-- * You should have received a copy of the GNU General Public License 
-- * along with Proview. If not, see <http://www.gnu.org/licenses/>
-- *
-- * Linking Proview statically or dynamically with other modules is
-- * making a combined work based on Proview. Thus, the terms and 
-- * conditions of the GNU General Public License cover the whole 
-- * combination.
-- *
-- * In addition, as a special exception, the copyright holders of
-- * Proview give you permission to, from the build function in the
-- * Proview Configurator, combine Proview with modules generated by the
-- * Proview PLC Editor to a PLC program, regardless of the license
-- * terms of these modules. You may copy and distribute the resulting
-- * combined work under the terms of your choice, provided that every 
-- * copy of the combined work is accompanied by a complete copy of 
-- * the source code of Proview (the version used to produce the 
-- * combined work), being distributed under the terms of the GNU 
-- * General Public License plus this exception.
--  
--   Ada binding by Jan de Kruijf (jan.de.kruyf@hotmail.com)
--

pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with pwr;
--with pwr_class;
with System;

package pwr_baseclasses is
   
   subtype pwr_tAiSensorTypeEnum is pwr.pwr_tEnum;  -- pwr_baseclasses.h:29
   
   subtype pwr_tDataRepEnum    is pwr.pwr_tEnum;  -- pwr_baseclasses.h:281
   
   subtype pwr_tEventFlagsMask is pwr.pwr_tMask;  -- pwr_baseclasses.h:402
   
   subtype pwr_tEventPrioEnum is pwr.pwr_tEnum;  -- pwr_baseclasses.h:432
   
   subtype pwr_tEventTypeEnum is pwr.pwr_tEnum;  -- pwr_baseclasses.h:458
   
   type pwr_sClass_ASup is 
      record
	 InP           : access pwr.pwr_tFloat32; 
	 c_In          : aliased pwr.pwr_tFloat32;
	 ControlP      : access pwr.pwr_tBoolean; 
	 Control       : aliased pwr.pwr_tBoolean;
	 Action        : aliased pwr.pwr_tBoolean;
	 Acked         : aliased pwr.pwr_tBoolean;
	 Blocked       : aliased pwr.pwr_tBoolean; 
	 Description   : aliased pwr.pwr_tString80;
	 DetectOn      : aliased pwr.pwr_tBoolean; 
	 DetectText    : aliased pwr.pwr_tString80;
	 ReturnText    : aliased pwr.pwr_tString80;
	 EventType     : aliased pwr_tEventTypeEnum; 
	 EventPriority : aliased pwr_tEventPrioEnum; 
	 EventFlags    : aliased pwr_tEventFlagsMask;
	 Sound         : aliased pwr.pwr_sAttrRef; 
	 MoreText      : aliased pwr.pwr_tText256; 
	 Recipient     : aliased pwr.pwr_tString40;
	 Attribute     : aliased pwr.pwr_sAttrRef; 
	 AlarmStatus   : aliased pwr.pwr_tUInt32;  
	 AlarmCheck    : aliased pwr.pwr_tBoolean; 
	 DetectCheck   : aliased pwr.pwr_tBoolean; 
	 DetectSend    : aliased pwr.pwr_tBoolean; 
	 DetectTime    : aliased pwr.pwr_tTime;  
	 ReturnCheck   : aliased pwr.pwr_tBoolean; 
	 ReturnSend    : aliased pwr.pwr_tBoolean; 
	 ReturnTime    : aliased pwr.pwr_tTime;  
	 AckTime       : aliased pwr.pwr_tTime;  
	 AckOutunit    : aliased pwr.pwr_tObjid; 
	 ActualValue   : aliased pwr.pwr_tFloat32; 
	 CtrlLimit     : aliased pwr.pwr_tFloat32; 
	 Hysteres      : aliased pwr.pwr_tFloat32; 
	 High          : aliased pwr.pwr_tBoolean; 
	 Unit          : aliased pwr.pwr_tString16;
	 TimerFlag     : aliased pwr.pwr_tBoolean; 
	 TimerNext     : access pwr.pwr_tBoolean;
	 TimerCount    : aliased pwr.pwr_tUInt32;
	 TimerDO       : access pwr.pwr_tBoolean;
	 TimerTime     : aliased pwr.pwr_tFloat32; 
	 TimerDODum    : aliased pwr.pwr_tBoolean; 
	 TimerObjDId   : aliased pwr.pwr_tObjid; 
	 TimerAcc      : aliased pwr.pwr_tInt32; 
	 TimerMin      : aliased pwr.pwr_tFloat32; 
	 TimerMax      : aliased pwr.pwr_tFloat32; 
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_sClass_ASup);  -- pwr_baseclasses.h:1744
   
   
   type pwr_sClass_DSup is 
      record
	 InP           : access pwr.pwr_tBoolean;
	 c_In          : aliased pwr.pwr_tBoolean;
	 ControlP      : access pwr.pwr_tBoolean;
	 Control       : aliased pwr.pwr_tBoolean;
	 Action        : aliased pwr.pwr_tBoolean;
	 Acked         : aliased pwr.pwr_tBoolean;
	 Blocked       : aliased pwr.pwr_tBoolean;
	 Description   : aliased pwr.pwr_tString80;
	 DetectOn      : aliased pwr.pwr_tBoolean; 
	 DetectText    : aliased pwr.pwr_tString80;
	 ReturnText    : aliased pwr.pwr_tString80;
	 EventType     : aliased pwr_tEventTypeEnum; 
	 EventPriority : aliased pwr_tEventPrioEnum; 
	 EventFlags    : aliased pwr_tEventFlagsMask;
	 Sound         : aliased pwr.pwr_sAttrRef; 
	 MoreText      : aliased pwr.pwr_tText256; 
	 Recipient     : aliased pwr.pwr_tString40;
	 Attribute     : aliased pwr.pwr_sAttrRef; 
	 AlarmStatus   : aliased pwr.pwr_tUInt32; 
	 AlarmCheck    : aliased pwr.pwr_tBoolean;
	 DetectCheck   : aliased pwr.pwr_tBoolean;
	 DetectSend    : aliased pwr.pwr_tBoolean;
	 DetectTime    : aliased pwr.pwr_tTime; 
	 ReturnCheck   : aliased pwr.pwr_tBoolean;
	 ReturnSend    : aliased pwr.pwr_tBoolean;
	 ReturnTime    : aliased pwr.pwr_tTime; 
	 AckTime       : aliased pwr.pwr_tTime; 
	 AckOutunit    : aliased pwr.pwr_tObjid;
	 ActualValue   : aliased pwr.pwr_tBoolean;
	 CtrlPosition  : aliased pwr.pwr_tBoolean;
	 TimerFlag     : aliased pwr.pwr_tBoolean;
	 TimerNext     : access pwr.pwr_tBoolean; 
	 TimerCount    : aliased pwr.pwr_tUInt32; 
	 TimerDO       : access pwr.pwr_tBoolean; 
	 TimerTime     : aliased pwr.pwr_tFloat32;
	 TimerDODum    : aliased pwr.pwr_tBoolean;
	 TimerObjDId   : aliased pwr.pwr_tObjid;
	 TimerAcc      : aliased pwr.pwr_tInt32;
	 TimerMin      : aliased pwr.pwr_tFloat32;
	 TimerMax      : aliased pwr.pwr_tFloat32;
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_sClass_DSup);  -- pwr_baseclasses.h :6475
   
   type pwr_sClass_ChanAi      is 
      record
	 Description            : aliased pwr.pwr_tString80;
	 SigChanCon             : aliased pwr.pwr_sAttrRef;  
	 Identity               : aliased pwr.pwr_tString40; 
	 Number                 : aliased pwr.pwr_tUInt16; 
	 ConversionOn           : aliased pwr.pwr_tBoolean;
	 ScanInterval           : aliased pwr.pwr_tUInt32; 
	 CalculateNewCoef       : aliased pwr.pwr_tBoolean;
	 RawValRangeLow         : aliased pwr.pwr_tFloat32;  
	 RawValRangeHigh        : aliased pwr.pwr_tFloat32; 
	 ChannelSigValRangeLow  : aliased pwr.pwr_tFloat32;
	 ChannelSigValRangeHigh : aliased pwr.pwr_tFloat32;
	 SigValPolyCoef0        : aliased pwr.pwr_tFloat32;
	 SigValPolyCoef1        : aliased pwr.pwr_tFloat32;
	 SigValueUnit           : aliased pwr.pwr_tString16; 
	 SensorTypeCode         : aliased pwr.pwr_tUInt16; 
	 SensorPolyType         : aliased pwr_tAiSensorTypeEnum; 
	 SensorPolyCoef0        : aliased pwr.pwr_tFloat32;
	 SensorPolyCoef1        : aliased pwr.pwr_tFloat32;
	 SensorPolyCoef2        : aliased pwr.pwr_tFloat32;
	 SensorSigValRangeLow   : aliased pwr.pwr_tFloat32;
	 SensorSigValRangeHigh  : aliased pwr.pwr_tFloat32;
	 ActValRangeLow         : aliased pwr.pwr_tFloat32;
	 ActValRangeHigh        : aliased pwr.pwr_tFloat32;
	 Representation         : aliased pwr_tDataRepEnum;
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_sClass_ChanAi);  
   -- pwr_baseclasses.h:2947
   
   type pwr_sClass_ChanAit_InValue_array is 
     array (0 .. 29) of aliased pwr.pwr_tFloat32;
   type pwr_sClass_ChanAit_OutValue_array is 
     array (0 .. 29) of aliased pwr.pwr_tFloat32;
   type pwr_sClass_ChanAit_Intercept_array is 
     array (0 .. 29) of aliased pwr.pwr_tFloat32;
   type pwr_sClass_ChanAit_Slope_array is 
     array (0 .. 29) of aliased pwr.pwr_tFloat32;
   type pwr_sClass_ChanAit_PolCoefficients_array is 
     array (0 .. 7) of aliased pwr.pwr_tFloat32;
   
   type pwr_sClass_ChanAit is 
      record
	 Description            : aliased pwr.pwr_tString80;
	 SigChanCon             : aliased pwr.pwr_sAttrRef; 
	 Identity               : aliased pwr.pwr_tString40; 
	 Number                 : aliased pwr.pwr_tUInt16; 
	 ConversionOn           : aliased pwr.pwr_tBoolean;
	 ScanInterval           : aliased pwr.pwr_tUInt32; 
	 CalculateNewCoef       : aliased pwr.pwr_tBoolean;
	 RawValRangeLow         : aliased pwr.pwr_tFloat32;  
	 RawValRangeHigh        : aliased pwr.pwr_tFloat32; 
	 ChannelSigValRangeLow  : aliased pwr.pwr_tFloat32;
	 ChannelSigValRangeHigh : aliased pwr.pwr_tFloat32;
	 SigValPolyCoef0        : aliased pwr.pwr_tFloat32;
	 SigValPolyCoef1        : aliased pwr.pwr_tFloat32;
	 SigValueUnit           : aliased pwr.pwr_tString16;  
	 SensorTypeCode         : aliased pwr.pwr_tUInt16;  
	 SensorPolyType         : aliased pwr.pwr_tUInt16;  
	 NoOfCoordinates        : aliased pwr.pwr_tUInt16; 
	 InValue                : aliased pwr_sClass_ChanAit_InValue_array;
	 OutValue               : aliased pwr_sClass_ChanAit_OutValue_array; 
	 Intercept              : aliased pwr_sClass_ChanAit_Intercept_array;
	 Slope                  : aliased pwr_sClass_ChanAit_Slope_array;
	 PolCoefficients     : aliased pwr_sClass_ChanAit_PolCoefficients_array;
	 PolUsedFlag            : aliased pwr.pwr_tBoolean; 
	 Date                   : aliased pwr.pwr_tTime; 
	 Signature              : aliased pwr.pwr_tString16;
	 Representation         : aliased pwr_tDataRepEnum;
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_sClass_ChanAit);  -- pwr_baseclasses.h:2987
   
   
   type pwr_sClass_IOHandler is 
      record
	 CycleTimeBus    : aliased pwr.pwr_tFloat32;
	 CycleTimeSerial : aliased pwr.pwr_tFloat32;
	 IOReadWriteFlag : aliased pwr.pwr_tBoolean;
	 IOSimulFlag     : aliased pwr.pwr_tBoolean;
	 DiCount         : aliased pwr.pwr_tUInt32; 
	 DoCount         : aliased pwr.pwr_tUInt32;
	 AiCount         : aliased pwr.pwr_tUInt32;
	 AoCount         : aliased pwr.pwr_tUInt32;
	 AvCount         : aliased pwr.pwr_tUInt32;
	 DvCount         : aliased pwr.pwr_tUInt32;
	 CoCount         : aliased pwr.pwr_tUInt32;
	 IiCount         : aliased pwr.pwr_tUInt32;
	 IoCount         : aliased pwr.pwr_tUInt32;
	 IvCount         : aliased pwr.pwr_tUInt32;
	 BiCount         : aliased pwr.pwr_tUInt32;
	 BoCount         : aliased pwr.pwr_tUInt32;
	 BiSize          : aliased pwr.pwr_tUInt32; 
	 BoSize          : aliased pwr.pwr_tUInt32; 
      end record;
   pragma Convention (C_Pass_By_Copy, pwr_sClass_IOHandler);  
   -- pwr_baseclasses.h:9782
   
   
end Pwr_Baseclasses;

   
   
