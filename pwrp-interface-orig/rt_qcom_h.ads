pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with pwr_h;
with sys_types_h;
with System;
with Interfaces.C.Extensions;
with co_platform_h;
with Interfaces.C.Strings;
limited with rpc_xdr_h;
with rpc_types_h;

package rt_qcom_h is


   qcom_cNQix : constant := 0;  --  rt_qcom.h:87
   qcom_cNNid : constant := 0;  --  rt_qcom.h:88
   qcom_cNAix : constant := 0;  --  rt_qcom.h:89
   qcom_cTmoNone : constant := 0;  --  rt_qcom.h:90
   qcom_cTmoEternal : constant := -1;  --  rt_qcom.h:91
   qcom_cIloopBack : constant := (2**31 or 0);  --  rt_qcom.h:92
   qcom_cInetEvent : constant := (2**31 or 100);  --  rt_qcom.h:93
   qcom_cIapplEvent : constant := (2**31 or 101);  --  rt_qcom.h:94
   qcom_cImhAllHandlers : constant := (2**31 or 102);  --  rt_qcom.h:95
   qcom_cImhAllOutunits : constant := (2**31 or 103);  --  rt_qcom.h:96
   qcom_cIhdServer : constant := (2**31 or 104);  --  rt_qcom.h:97
   qcom_cIhdClient : constant := (2**31 or 105);  --  rt_qcom.h:98
   qcom_cInacp : constant := (2**31 or 106);  --  rt_qcom.h:99
   qcom_cIini : constant := (2**31 or 107);  --  rt_qcom.h:100

   qcom_mNode_u_u : constant := 0;  --  rt_qcom.h:238
   --  unsupported macro: qcom_mNode_initiated pwr_Bit(0)
   --  unsupported macro: qcom_mNode_connected pwr_Bit(1)
   --  unsupported macro: qcom_mNode_active pwr_Bit(2)
   --  unsupported macro: qcom_mNode_up (qcom_mNode_connected|qcom_mNode_active)
   --  unsupported macro: qcom_mNode_down (~qcom_mNode_up)
   --  unsupported macro: qcom_mNode_ (~qcom_mNode__)

  -- 
  -- * Proview   Open Source Process Control.
  -- * Copyright (C) 2005-2014 SSAB EMEA AB.
  -- *
  -- * This file is part of Proview.
  -- *
  -- * This program is free software; you can redistribute it and/or 
  -- * modify it under the terms of the GNU General Public License as 
  -- * published by the Free Software Foundation, either version 2 of 
  -- * the License, or (at your option) any later version.
  -- *
  -- * This program is distributed in the hope that it will be useful 
  -- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
  -- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
  -- * GNU General Public License for more details.
  -- *
  -- * You should have received a copy of the GNU General Public License 
  -- * along with Proview. If not, see <http://www.gnu.org/licenses/>
  -- *
  -- * Linking Proview statically or dynamically with other modules is
  -- * making a combined work based on Proview. Thus, the terms and 
  -- * conditions of the GNU General Public License cover the whole 
  -- * combination.
  -- *
  -- * In addition, as a special exception, the copyright holders of
  -- * Proview give you permission to, from the build function in the
  -- * Proview Configurator, combine Proview with modules generated by the
  -- * Proview PLC Editor to a PLC program, regardless of the license
  -- * terms of these modules. You may copy and distribute the resulting
  -- * combined work under the terms of your choice, provided that every 
  -- * copy of the combined work is accompanied by a complete copy of 
  -- * the source code of Proview (the version used to produce the 
  -- * combined work), being distributed under the terms of the GNU 
  -- * General Public License plus this exception.
  --  

  -- rt_qcom.h -- Queue communication  
  --* @addtogroup QCOM  
  --@{ 
  --* @defgroup QCOM_DS Qcom Data Structures
  -- *  @ingroup QCOM
  -- *  @{
  --  

   subtype qcom_tBus is int;  -- rt_qcom.h:108

   subtype qcom_tQix is int;  -- rt_qcom.h:109

   subtype qcom_tAix is int;  -- rt_qcom.h:110

   subtype qcom_tRid is int;  -- rt_qcom.h:111

   subtype qcom_eBtype is unsigned;
   qcom_eBtype_u_u : constant qcom_eBtype := 0;
   qcom_eBtype_system : constant qcom_eBtype := 1;
   qcom_eBtype_qcom : constant qcom_eBtype := 2;
   qcom_eBtype_event : constant qcom_eBtype := 3;
   qcom_eBtype_u : constant qcom_eBtype := 200;  -- rt_qcom.h:119

   subtype qcom_eStype is unsigned;
   qcom_eStype_u_u : constant qcom_eStype := 0;
   qcom_eStype_linkConnect : constant qcom_eStype := 1;
   qcom_eStype_linkDisconnect : constant qcom_eStype := 2;
   qcom_eStype_linkActive : constant qcom_eStype := 3;
   qcom_eStype_linkStalled : constant qcom_eStype := 4;
   qcom_eStype_applConnect : constant qcom_eStype := 5;
   qcom_eStype_applDisconnect : constant qcom_eStype := 6;
   qcom_eStype_u : constant qcom_eStype := 32;  -- rt_qcom.h:130

   type qcom_eQtype is 
     (qcom_eQtype_u_u,
      qcom_eQtype_private,
      qcom_eQtype_forward,
      qcom_eQtype_broadcast,
      qcom_eQtype_event,
      qcom_eQtype_u);
   pragma Convention (C, qcom_eQtype);  -- rt_qcom.h:139

   type qcom_eNodeConnection is 
     (qcom_eNodeConnectionFull,
      qcom_eNodeConnectionQcom);
   pragma Convention (C, qcom_eNodeConnection);  -- rt_qcom.h:144

  --*
  -- * @brief ZZZ Text that appers when the Data structure is listed.
  -- *
  -- * More detailed text  
  --  

  --*< Queue index     
   type qcom_sQid is record
      qix : aliased qcom_tQix;  -- rt_qcom.h:153
      nid : aliased pwr_h.pwr_tNodeId;  -- rt_qcom.h:154
   end record;
   pragma Convention (C_Pass_By_Copy, qcom_sQid);  -- rt_qcom.h:155

   --  skipped anonymous struct anon_72

  --*< Node identity   
   qcom_cNQid : aliased qcom_sQid;  -- rt_qcom.h:157
   pragma Import (CPP, qcom_cNQid, "_ZL10qcom_cNQid");

   qcom_cQnetEvent : aliased qcom_sQid;  -- rt_qcom.h:158
   pragma Import (CPP, qcom_cQnetEvent, "_ZL15qcom_cQnetEvent");

   qcom_cQapplEvent : aliased qcom_sQid;  -- rt_qcom.h:159
   pragma Import (CPP, qcom_cQapplEvent, "_ZL16qcom_cQapplEvent");

   qcom_cQmhAllHandlers : aliased qcom_sQid;  -- rt_qcom.h:160
   pragma Import (CPP, qcom_cQmhAllHandlers, "_ZL20qcom_cQmhAllHandlers");

   qcom_cQmhAllOutunits : aliased qcom_sQid;  -- rt_qcom.h:161
   pragma Import (CPP, qcom_cQmhAllOutunits, "_ZL20qcom_cQmhAllOutunits");

   qcom_cQhdServer : aliased qcom_sQid;  -- rt_qcom.h:162
   pragma Import (CPP, qcom_cQhdServer, "_ZL15qcom_cQhdServer");

   qcom_cQhdClient : aliased qcom_sQid;  -- rt_qcom.h:163
   pragma Import (CPP, qcom_cQhdClient, "_ZL15qcom_cQhdClient");

   qcom_cQnacp : aliased qcom_sQid;  -- rt_qcom.h:164
   pragma Import (CPP, qcom_cQnacp, "_ZL11qcom_cQnacp");

   qcom_cQini : aliased qcom_sQid;  -- rt_qcom.h:165
   pragma Import (CPP, qcom_cQini, "_ZL10qcom_cQini");

  --! Application identity
  --*< Application index  
   type qcom_sAid is record
      aix : aliased qcom_tAix;  -- rt_qcom.h:169
      nid : aliased pwr_h.pwr_tNodeId;  -- rt_qcom.h:170
   end record;
   pragma Convention (C_Pass_By_Copy, qcom_sAid);  -- rt_qcom.h:171

   --  skipped anonymous struct anon_73

  --*< Node identity  
   qcom_cNAid : aliased qcom_sAid;  -- rt_qcom.h:173
   pragma Import (CPP, qcom_cNAid, "_ZL10qcom_cNAid");

  --! Qcom application
   type qcom_sAppl is record
      aid : aliased qcom_sAid;  -- rt_qcom.h:177
      pid : aliased sys_types_h.pid_t;  -- rt_qcom.h:178
   end record;
   pragma Convention (C_Pass_By_Copy, qcom_sAppl);  -- rt_qcom.h:179

   --  skipped anonymous struct anon_74

  --! Qcom event
   type qcom_sEvent is record
      aid : aliased qcom_sAid;  -- rt_qcom.h:183
      pid : aliased sys_types_h.pid_t;  -- rt_qcom.h:184
      mask : aliased int;  -- rt_qcom.h:185
   end record;
   pragma Convention (C_Pass_By_Copy, qcom_sEvent);  -- rt_qcom.h:186

   --  skipped anonymous struct anon_75

  --! Queue attributes
   type qcom_sQattr is record
      c_type : aliased qcom_eQtype;  -- rt_qcom.h:190
      quota : aliased unsigned;  -- rt_qcom.h:191
   end record;
   pragma Convention (C_Pass_By_Copy, qcom_sQattr);  -- rt_qcom.h:192

   --  skipped anonymous struct anon_76

  --! Qcom type
   type qcom_sType is record
      b : aliased qcom_eBtype;  -- rt_qcom.h:196
      s : aliased qcom_eStype;  -- rt_qcom.h:197
   end record;
   pragma Convention (C_Pass_By_Copy, qcom_sType);  -- rt_qcom.h:198

   --  skipped anonymous struct anon_77

  --! Put data structure.
   type qcom_sPut is record
      reply : aliased qcom_sQid;  -- rt_qcom.h:202
      c_type : aliased qcom_sType;  -- rt_qcom.h:203
      msg_id : aliased unsigned;  -- rt_qcom.h:204
      prio : aliased unsigned;  -- rt_qcom.h:205
      size : aliased unsigned;  -- rt_qcom.h:206
      data : System.Address;  -- rt_qcom.h:207
   end record;
   pragma Convention (C_Pass_By_Copy, qcom_sPut);  -- rt_qcom.h:208

   --  skipped anonymous struct anon_78

  --! Get data structure
   type qcom_sGet is record
      sender : aliased qcom_sAid;  -- rt_qcom.h:212
      pid : aliased sys_types_h.pid_t;  -- rt_qcom.h:213
      receiver : aliased qcom_sQid;  -- rt_qcom.h:214
      reply : aliased qcom_sQid;  -- rt_qcom.h:215
      c_type : aliased qcom_sType;  -- rt_qcom.h:216
      rid : aliased qcom_tRid;  -- rt_qcom.h:217
      maxSize : aliased unsigned;  -- rt_qcom.h:218
      size : aliased unsigned;  -- rt_qcom.h:219
      data : System.Address;  -- rt_qcom.h:220
   end record;
   pragma Convention (C_Pass_By_Copy, qcom_sGet);  -- rt_qcom.h:221

   --  skipped anonymous struct anon_79

  --! Node status
   type qcom_mNode;
   type anon_81 is record
      initiated : Extensions.Unsigned_1;  -- rt_qcom.h:227
      connected : Extensions.Unsigned_1;  -- rt_qcom.h:227
      active : Extensions.Unsigned_1;  -- rt_qcom.h:227
      fill_0 : Extensions.Unsigned_5;  -- rt_qcom.h:227
      fill_1 : aliased unsigned_char;  -- rt_qcom.h:227
      fill_2 : aliased unsigned_char;  -- rt_qcom.h:227
      fill_3 : aliased unsigned_char;  -- rt_qcom.h:227
   end record;
   pragma Convention (C_Pass_By_Copy, anon_81);
   type qcom_mNode (discr : unsigned := 0) is record
      case discr is
         when 0 =>
            m : aliased pwr_h.pwr_tBitMask;  -- rt_qcom.h:225
         when others =>
            b : aliased anon_81;  -- rt_qcom.h:236
      end case;
   end record;
   pragma Convention (C_Pass_By_Copy, qcom_mNode);
   pragma Unchecked_Union (qcom_mNode);  -- rt_qcom.h:247

   --  skipped anonymous struct anon_80

  --! Bitmask representation
  --! Data for a Qcom node.
  --!< node index
   subtype qcom_sNode_name_array is Interfaces.C.char_array (0 .. 79);
   type qcom_sNode is record
      nid : aliased pwr_h.pwr_tNodeId;  -- rt_qcom.h:251
      flags : qcom_mNode;  -- rt_qcom.h:252
      name : aliased qcom_sNode_name_array;  -- rt_qcom.h:253
      os : aliased co_platform_h.co_eOS;  -- rt_qcom.h:254
      hw : aliased co_platform_h.co_eHW;  -- rt_qcom.h:255
      bo : aliased co_platform_h.co_eBO;  -- rt_qcom.h:256
      ft : aliased co_platform_h.co_eFT;  -- rt_qcom.h:257
      connection : aliased qcom_eNodeConnection;  -- rt_qcom.h:258
   end record;
   pragma Convention (C_Pass_By_Copy, qcom_sNode);  -- rt_qcom.h:259

   --  skipped anonymous struct anon_82

  --!< node flags
  --!< node name
  --!< operating system
  --!< hardware
  --!< big/little endian
  --!< float type
  --!< type of connection
  --* @}  
  --* @defgroup QCOM_FC Qcom Functions
  -- *  @ingroup QCOM
  -- *  @{
  --  

  -- Function prototypes.   
   function qcom_AidCompare (a1 : access constant qcom_sAid; a2 : access constant qcom_sAid) return int;  -- rt_qcom.h:271
   pragma Import (C, qcom_AidCompare, "qcom_AidCompare");

   function qcom_AidIsEqual (a1 : access constant qcom_sAid; a2 : access constant qcom_sAid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:276
   pragma Import (C, qcom_AidIsEqual, "qcom_AidIsEqual");

   function qcom_AidIsNotEqual (a1 : access constant qcom_sAid; a2 : access constant qcom_sAid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:281
   pragma Import (C, qcom_AidIsNotEqual, "qcom_AidIsNotEqual");

   function qcom_AidIsNotNull (a : access constant qcom_sAid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:286
   pragma Import (C, qcom_AidIsNotNull, "qcom_AidIsNotNull");

   function qcom_AidIsNull (a : access constant qcom_sAid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:290
   pragma Import (C, qcom_AidIsNull, "qcom_AidIsNull");

   function qcom_Alloc (sts : access pwr_h.pwr_tStatus; size : unsigned) return System.Address;  -- rt_qcom.h:294
   pragma Import (C, qcom_Alloc, "qcom_Alloc");

   function qcom_AttachQ (sts : access pwr_h.pwr_tStatus; qid : access constant qcom_sQid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:299
   pragma Import (C, qcom_AttachQ, "qcom_AttachQ");

   function qcom_Bind
     (sts : access pwr_h.pwr_tStatus;
      myQ : access constant qcom_sQid;
      toQ : access constant qcom_sQid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:304
   pragma Import (C, qcom_Bind, "qcom_Bind");

   function qcom_CreateQ
     (sts : access pwr_h.pwr_tStatus;
      myQ : access qcom_sQid;
      attr : access qcom_sQattr;
      qname : Interfaces.C.Strings.chars_ptr) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:310
   pragma Import (C, qcom_CreateQ, "qcom_CreateQ");

   function qcom_DeleteQ (sts : access pwr_h.pwr_tStatus; myQ : access constant qcom_sQid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:317
   pragma Import (C, qcom_DeleteQ, "qcom_DeleteQ");

   function qcom_SignalAnd
     (status : access pwr_h.pwr_tStatus;
      eid : access constant qcom_sQid;
      mask : int) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:323
   pragma Import (C, qcom_SignalAnd, "qcom_SignalAnd");

   function qcom_SignalOr
     (status : access pwr_h.pwr_tStatus;
      eid : access constant qcom_sQid;
      mask : int) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:329
   pragma Import (C, qcom_SignalOr, "qcom_SignalOr");

   function qcom_WaitAnd
     (status : access pwr_h.pwr_tStatus;
      qid : access constant qcom_sQid;
      eid : access constant qcom_sQid;
      mask : int;
      tmo : int) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:335
   pragma Import (C, qcom_WaitAnd, "qcom_WaitAnd");

   function qcom_WaitOr
     (status : access pwr_h.pwr_tStatus;
      qid : access constant qcom_sQid;
      eid : access constant qcom_sQid;
      mask : int;
      tmo : int;
      event : access int) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:343
   pragma Import (C, qcom_WaitOr, "qcom_WaitOr");

   function qcom_EventMask (status : access pwr_h.pwr_tStatus; eid : access constant qcom_sQid) return pwr_h.pwr_tBitMask;  -- rt_qcom.h:352
   pragma Import (C, qcom_EventMask, "qcom_EventMask");

   function qcom_Exit (sts : access pwr_h.pwr_tStatus) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:357
   pragma Import (C, qcom_Exit, "qcom_Exit");

   function qcom_Free (sts : access pwr_h.pwr_tStatus; buffer : System.Address) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:361
   pragma Import (C, qcom_Free, "qcom_Free");

   function qcom_Init
     (sts : access pwr_h.pwr_tStatus;
      aid : access qcom_sAid;
      aname : Interfaces.C.Strings.chars_ptr) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:366
   pragma Import (C, qcom_Init, "qcom_Init");

   function qcom_Get
     (sts : access pwr_h.pwr_tStatus;
      myQ : access constant qcom_sQid;
      get : access qcom_sGet;
      tmo_ms : int) return System.Address;  -- rt_qcom.h:372
   pragma Import (C, qcom_Get, "qcom_Get");

   function qcom_MyBus (sts : access pwr_h.pwr_tStatus) return qcom_tBus;  -- rt_qcom.h:379
   pragma Import (C, qcom_MyBus, "qcom_MyBus");

   function qcom_MyNode (sts : access pwr_h.pwr_tStatus; node : access qcom_sNode) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:383
   pragma Import (C, qcom_MyNode, "qcom_MyNode");

   function qcom_NextNode
     (sts : access pwr_h.pwr_tStatus;
      node : access qcom_sNode;
      nid : pwr_h.pwr_tNodeId) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:388
   pragma Import (C, qcom_NextNode, "qcom_NextNode");

   function qcom_Put
     (sts : access pwr_h.pwr_tStatus;
      receiver : access constant qcom_sQid;
      put : access qcom_sPut) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:394
   pragma Import (C, qcom_Put, "qcom_Put");

   function qcom_QidCompare (q1 : access constant qcom_sQid; q2 : access constant qcom_sQid) return int;  -- rt_qcom.h:400
   pragma Import (C, qcom_QidCompare, "qcom_QidCompare");

   function qcom_QidIsEqual (q1 : access constant qcom_sQid; q2 : access constant qcom_sQid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:405
   pragma Import (C, qcom_QidIsEqual, "qcom_QidIsEqual");

   function qcom_QidIsNotEqual (q1 : access constant qcom_sQid; q2 : access constant qcom_sQid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:410
   pragma Import (C, qcom_QidIsNotEqual, "qcom_QidIsNotEqual");

   function qcom_QidIsNull (q : access constant qcom_sQid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:415
   pragma Import (C, qcom_QidIsNull, "qcom_QidIsNull");

   function qcom_QidIsNotNull (q : access constant qcom_sQid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:419
   pragma Import (C, qcom_QidIsNotNull, "qcom_QidIsNotNull");

   function qcom_QidToString
     (s : Interfaces.C.Strings.chars_ptr;
      qid : access qcom_sQid;
      prefix : int) return Interfaces.C.Strings.chars_ptr;  -- rt_qcom.h:423
   pragma Import (C, qcom_QidToString, "qcom_QidToString");

   function qcom_Reply
     (sts : access pwr_h.pwr_tStatus;
      get : access qcom_sGet;
      put : access qcom_sPut) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:429
   pragma Import (C, qcom_Reply, "qcom_Reply");

   function qcom_Request
     (sts : access pwr_h.pwr_tStatus;
      receiver : access constant qcom_sQid;
      put : access qcom_sPut;
      myQ : access constant qcom_sQid;
      get : access qcom_sGet;
      tmo_ms : int;
      flags : pwr_h.pwr_tBitMask) return System.Address;  -- rt_qcom.h:435
   pragma Import (C, qcom_Request, "qcom_Request");

   function qcom_Unbind
     (sts : access pwr_h.pwr_tStatus;
      myQ : access constant qcom_sQid;
      fromQ : access constant qcom_sQid) return pwr_h.pwr_tBoolean;  -- rt_qcom.h:445
   pragma Import (C, qcom_Unbind, "qcom_Unbind");

   function xdr_qcom_sAid (xdrs : access rpc_xdr_h.XDR; objp : access qcom_sAid) return rpc_types_h.bool_t;  -- rt_qcom.h:455
   pragma Import (C, xdr_qcom_sAid, "xdr_qcom_sAid");

   function xdr_qcom_sQid (xdrs : access rpc_xdr_h.XDR; objp : access qcom_sQid) return rpc_types_h.bool_t;  -- rt_qcom.h:458
   pragma Import (C, xdr_qcom_sQid, "xdr_qcom_sQid");

  --* @}  
  --* @}  
end rt_qcom_h;
