pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with Interfaces.C.Extensions;
with pwr_h;
with rt_qcom_h;
with pwr_class_h;
with rpc_types_h;
with co_cdh_h;
with sys_types_h;
limited with rpc_xdr_h;
with System;
with Interfaces.C.Strings;
limited with netinet_in_h;

package rt_net_h is


   net_cVersion : constant := 8;  --  rt_net.h:62

   net_cFirstCclassVersion : constant := 8;  --  rt_net.h:65

   net_cSendRcvTmo : constant := 20000;  --  rt_net.h:67
   net_cProcHandler : constant := 110;  --  rt_net.h:68
   net_cMsgClass : constant := 200;  --  rt_net.h:69

   net_cSizeSmall : constant := 600;  --  rt_net.h:71
   net_cSizeMedium : constant := 5000;  --  rt_net.h:72
   net_cSizeLarge : constant := 9900;  --  rt_net.h:73

   net_mLog_u_u : constant := 0;  --  rt_net.h:151
   --  unsupported macro: net_mLog_linkStates pwr_Bit(0)
   --  unsupported macro: net_mLog_id pwr_Bit(1)
   --  unsupported macro: net_mLog_messages pwr_Bit(2)
   --  unsupported macro: net_mLog_tmon pwr_Bit(3)
   --  unsupported macro: net_mLog_cacheTrim pwr_Bit(4)
   --  unsupported macro: net_mLog_sub pwr_Bit(5)
   --  unsupported macro: net_mLog_san pwr_Bit(6)
   --  unsupported macro: net_mLog_ (~net_mLog__)
   --  unsupported macro: net_mLog_all net_mLog_
   --  unsupported macro: net_cSubMaxAdd (net_cSizeLarge/sizeof(net_sSubSpec))
   --  unsupported macro: net_cSubMaxRemove (net_cSizeLarge/sizeof(pwr_tSubid))

   net_cSubMaxMessage : constant := 100;  --  rt_net.h:290
   --  unsupported macro: net_cSanMaxAdd (net_cSizeLarge/sizeof(net_sSanEntry))
   --  unsupported macro: net_cSanMaxRemove (net_cSizeLarge/sizeof(pwr_tSubid))
   --  unsupported macro: net_cSanMaxUpdate (net_cSizeLarge/sizeof(net_sSanData))

   net_mGo_u_u : constant := 0;  --  rt_net.h:390
   --  unsupported macro: net_mGo_isParent pwr_Bit(0)
   --  unsupported macro: net_mGo_isAliasClient pwr_Bit(1)
   --  unsupported macro: net_mGo_isAliasServer pwr_Bit(2)
   --  unsupported macro: net_mGo_isMountClient pwr_Bit(3)
   --  unsupported macro: net_mGo_inSibList pwr_Bit(4)
   --  unsupported macro: net_mGo_hasSubClass pwr_Bit(5)
   --  unsupported macro: net_mGo_isClient (net_mGo_isAliasClient|net_mGo_isMountClient)
   --  unsupported macro: net_mGo_ (~net_mGo__)
   --  unsupported macro: net_cObjectMaxCount (net_cSizeLarge/sizeof(net_sGobject))
   --  unsupported macro: net_cVolumeMaxCount (net_cSizeLarge/sizeof(net_sGvolume))

  -- * Please do not edit this file.
  -- * It was generated using rpcgen.
  --  

  -- 
  -- * Proview   $Id: rt_net.x,v 1.13 2008-06-24 07:14:53 claes Exp $
  -- * Copyright (C) 2005 SSAB Oxelösund AB.
  -- *
  -- * This program is free software; you can redistribute it and/or 
  -- * modify it under the terms of the GNU General Public License as 
  -- * published by the Free Software Foundation, either version 2 of 
  -- * the License, or (at your option) any later version.
  -- *
  -- * This program is distributed in the hope that it will be useful 
  -- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
  -- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
  -- * GNU General Public License for more details.
  -- *
  -- * You should have received a copy of the GNU General Public License 
  -- * along with the program, if not, write to the Free Software 
  -- * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  --  

  --* Protocol version. Increase whenever an
  --    incompatible change is done to the protocol.
  --    Update supported features in function id() in file rt_neth.c   

  --* @note DO NOT change this number  
   subtype net_eMsg is unsigned;
   net_eMsg_u_u : constant net_eMsg := -1;
   net_eMsg_error : constant net_eMsg := 0;
   net_eMsg_id : constant net_eMsg := 1;
   net_eMsg_idAck : constant net_eMsg := 2;
   net_eMsg_idAck2 : constant net_eMsg := 3;
   net_eMsg_volumes : constant net_eMsg := 4;
   net_eMsg_volumesR : constant net_eMsg := 5;
   net_eMsg_subAdd : constant net_eMsg := 6;
   net_eMsg_subRemove : constant net_eMsg := 7;
   net_eMsg_subData : constant net_eMsg := 8;
   net_eMsg_sanAdd : constant net_eMsg := 9;
   net_eMsg_sanRemove : constant net_eMsg := 10;
   net_eMsg_sanUpdate : constant net_eMsg := 11;
   net_eMsg_nameToObject : constant net_eMsg := 12;
   net_eMsg_oidToObject : constant net_eMsg := 13;
   net_eMsg_objectR : constant net_eMsg := 14;
   net_eMsg_getObjectInfo : constant net_eMsg := 15;
   net_eMsg_getObjectInfoR : constant net_eMsg := 16;
   net_eMsg_setObjectInfo : constant net_eMsg := 17;
   net_eMsg_setObjectInfoR : constant net_eMsg := 18;
   net_eMsg_flush : constant net_eMsg := 19;
   net_eMsg_createObject : constant net_eMsg := 20;
   net_eMsg_deleteObject : constant net_eMsg := 21;
   net_eMsg_moveObject : constant net_eMsg := 22;
   net_eMsg_renameObject : constant net_eMsg := 23;
   net_eMsg_nodeUp : constant net_eMsg := 24;
   net_eMsg_nodeDown : constant net_eMsg := 25;
   net_eMsg_getCclass : constant net_eMsg := 26;
   net_eMsg_getCclassR : constant net_eMsg := 27;
   net_eMsg_getGclass : constant net_eMsg := 28;
   net_eMsg_getGclassR : constant net_eMsg := 29;
   net_eMsg_serverConnect : constant net_eMsg := 30;
   net_eMsg_fileList : constant net_eMsg := 31;
   net_eMsg_fileListR : constant net_eMsg := 32;
   net_eMsg_getCircBuffer : constant net_eMsg := 33;
   net_eMsg_getCircBufferR : constant net_eMsg := 34;
   net_eMsg_updateCircBuffer : constant net_eMsg := 35;
   net_eMsg_updateCircBufferR : constant net_eMsg := 36;
   net_eMsg_u : constant net_eMsg := 37;
   net_eMsg_volumes7 : constant net_eMsg := 38;
   net_eMsg_end : constant net_eMsg := 39;  -- rt_net.h:77

   subtype net_eEvent is unsigned;
   net_eEvent_u_u : constant net_eEvent := -1;
   net_eEvent_nodeUp : constant net_eEvent := 0;
   net_eEvent_nodeDown : constant net_eEvent := 1;
   net_eEvent_id : constant net_eEvent := 2;
   net_eEvent_idAck : constant net_eEvent := 3;
   net_eEvent_idAck2 : constant net_eEvent := 4;
   net_eEvent_error : constant net_eEvent := 5;
   net_eEvent_other : constant net_eEvent := 6;
   net_eEvent_u : constant net_eEvent := 7;  -- rt_net.h:122

   type net_mLog;
   type anon_126 is record
      linkStates : Extensions.Unsigned_1;  -- rt_net.h:136
      id : Extensions.Unsigned_1;  -- rt_net.h:136
      messages : Extensions.Unsigned_1;  -- rt_net.h:136
      tmon : Extensions.Unsigned_1;  -- rt_net.h:136
      cacheTrim : Extensions.Unsigned_1;  -- rt_net.h:136
      sub : Extensions.Unsigned_1;  -- rt_net.h:136
      san : Extensions.Unsigned_1;  -- rt_net.h:136
      fill0 : Extensions.Unsigned_1;  -- rt_net.h:136
      fill1 : aliased unsigned_char;  -- rt_net.h:136
      fill2 : aliased unsigned_char;  -- rt_net.h:136
      fill3 : aliased unsigned_char;  -- rt_net.h:136
   end record;
   pragma Convention (C_Pass_By_Copy, anon_126);
   type net_mLog (discr : unsigned := 0) is record
      case discr is
         when 0 =>
            m : aliased pwr_h.pwr_tBitMask;  -- rt_net.h:135
         when others =>
            b : aliased anon_126;  -- rt_net.h:149
      end case;
   end record;
   pragma Convention (C_Pass_By_Copy, net_mLog);
   pragma Unchecked_Union (net_mLog);  -- rt_net.h:162

   --  skipped anonymous struct anon_125

   type net_sMessage is record
      xdr : aliased pwr_h.pwr_tBoolean;  -- rt_net.h:166
      msn : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:167
      nid : aliased pwr_h.pwr_tNodeId;  -- rt_net.h:168
   end record;
   pragma Convention (C_Pass_By_Copy, net_sMessage);  -- rt_net.h:165

   type net_sError is record
      hdr : aliased net_sMessage;  -- rt_net.h:173
      remqid : aliased rt_qcom_h.qcom_sQid;  -- rt_net.h:174
      sts : aliased pwr_h.pwr_tStatus;  -- rt_net.h:175
   end record;
   pragma Convention (C_Pass_By_Copy, net_sError);  -- rt_net.h:172

   type net_sNode is record
      handler : aliased rt_qcom_h.qcom_sQid;  -- rt_net.h:180
      netver : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:181
      nod_oid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:182
      vol_oid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:183
   end record;
   pragma Convention (C_Pass_By_Copy, net_sNode);  -- rt_net.h:179

   type net_sId is record
      hdr : aliased net_sMessage;  -- rt_net.h:188
      node : aliased net_sNode;  -- rt_net.h:189
   end record;
   pragma Convention (C_Pass_By_Copy, net_sId);  -- rt_net.h:187

   type net_sIdAck2 is record
      hdr : aliased net_sMessage;  -- rt_net.h:194
   end record;
   pragma Convention (C_Pass_By_Copy, net_sIdAck2);  -- rt_net.h:193

   type net_sNodeUp is record
      hdr : aliased net_sMessage;  -- rt_net.h:199
      nid : aliased pwr_h.pwr_tNodeId;  -- rt_net.h:200
   end record;
   pragma Convention (C_Pass_By_Copy, net_sNodeUp);  -- rt_net.h:198

   subtype net_eState is unsigned;
   net_eState_u_u : constant net_eState := -1;
   net_eState_down : constant net_eState := 0;
   net_eState_istrt : constant net_eState := 1;
   net_eState_astrt : constant net_eState := 2;
   net_eState_up : constant net_eState := 3;
   net_eState_u : constant net_eState := 4;  -- rt_net.h:204

   type net_sClassDef is record
      Editor : aliased pwr_h.pwr_tInt32;  -- rt_net.h:215
      Method : aliased pwr_h.pwr_tInt32;  -- rt_net.h:216
      Flags : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:217
      NumOfObjBodies : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:218
      PopEditor : aliased pwr_h.pwr_tInt32;  -- rt_net.h:219
   end record;
   pragma Convention (C_Pass_By_Copy, net_sClassDef);  -- rt_net.h:214

   type net_sObjBodyDef is record
      StructName : aliased pwr_h.pwr_tStructName;  -- rt_net.h:224
      NumOfParams : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:225
      Size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:226
      NextAix : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:227
      Flags : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:228
   end record;
   pragma Convention (C_Pass_By_Copy, net_sObjBodyDef);  -- rt_net.h:223

   type net_sParInfo is record
      PgmName : aliased pwr_h.pwr_tPgmName;  -- rt_net.h:233
      c_Type : aliased pwr_class_h.pwr_eType;  -- rt_net.h:234
      Offset : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:235
      Size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:236
      Flags : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:237
      Elements : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:238
      ParamIndex : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:239
   end record;
   pragma Convention (C_Pass_By_Copy, net_sParInfo);  -- rt_net.h:232

   type net_sParam is record
      Info : aliased net_sParInfo;  -- rt_net.h:244
      TypeRef : aliased pwr_h.pwr_tTypeId;  -- rt_net.h:245
   end record;
   pragma Convention (C_Pass_By_Copy, net_sParam);  -- rt_net.h:243

   type net_sSubSpec is record
      sid : aliased pwr_h.pwr_tSubid;  -- rt_net.h:250
      dt : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:251
      sub_by_name : aliased pwr_h.pwr_tBoolean;  -- rt_net.h:252
      aref : aliased pwr_h.pwr_sAttrRef;  -- rt_net.h:253
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSubSpec);  -- rt_net.h:249

  -- Header  
   type net_sSubAdd_spec_array is array (0 .. 0) of aliased net_sSubSpec;
   type net_sSubAdd is record
      hdr : aliased net_sMessage;  -- rt_net.h:259
      count : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:260
      spec : aliased net_sSubAdd_spec_array;  -- rt_net.h:261
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSubAdd);  -- rt_net.h:262

   --  skipped anonymous struct anon_127

  -- # of entries  
  -- Specifications (dynamic)  
   function xdr_net_sSubAdd return rpc_types_h.bool_t;  -- rt_net.h:265
   pragma Import (C, xdr_net_sSubAdd, "xdr_net_sSubAdd");

  -- Remove subscription.   
  -- Header  
   type net_sSubRemove_sid_array is array (0 .. 0) of aliased pwr_h.pwr_tSubid;
   type net_sSubRemove is record
      hdr : aliased net_sMessage;  -- rt_net.h:272
      count : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:273
      sid : aliased net_sSubRemove_sid_array;  -- rt_net.h:274
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSubRemove);  -- rt_net.h:275

   --  skipped anonymous struct anon_128

  -- # of removals  
  -- Subscription to remove  
   function xdr_net_sSubRemove return rpc_types_h.bool_t;  -- rt_net.h:278
   pragma Import (C, xdr_net_sSubRemove, "xdr_net_sSubRemove");

  -- Subscription data transfer.   
  -- Tag  
   subtype net_sSubData_data_array is Interfaces.C.char_array (0 .. 0);
   type net_sSubData is record
      sid : aliased pwr_h.pwr_tSubid;  -- rt_net.h:283
      sts : aliased pwr_h.pwr_tStatus;  -- rt_net.h:284
      size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:285
      data : aliased net_sSubData_data_array;  -- rt_net.h:286
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSubData);  -- rt_net.h:287

   --  skipped anonymous struct anon_129

  -- Status  
  -- Size of data  
  -- Dynamic  
   function xdr_net_sSubData return rpc_types_h.bool_t;  -- rt_net.h:288
   pragma Import (C, xdr_net_sSubData, "xdr_net_sSubData");

  -- Header when used as message  
   type net_sSubMessage_subdata_array is array (0 .. 0) of aliased net_sSubData;
   type net_sSubMessage is record
      hdr : aliased net_sMessage;  -- rt_net.h:293
      count : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:294
      subdata : aliased net_sSubMessage_subdata_array;  -- rt_net.h:295
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSubMessage);  -- rt_net.h:296

   --  skipped anonymous struct anon_130

  -- # of subdata entries in msg  
  -- Dynamic  
   function xdr_net_sSubMessage return rpc_types_h.bool_t;  -- rt_net.h:298
   pragma Import (C, xdr_net_sSubMessage, "xdr_net_sSubMessage");

   type net_sSanEntry is record
      oid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:302
      sid : aliased pwr_h.pwr_tSubid;  -- rt_net.h:303
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSanEntry);  -- rt_net.h:301

  -- Header  
   type net_sSanAdd_sane_array is array (0 .. 0) of aliased net_sSanEntry;
   type net_sSanAdd is record
      hdr : aliased net_sMessage;  -- rt_net.h:309
      vid : aliased pwr_h.pwr_tVolumeId;  -- rt_net.h:310
      count : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:311
      sane : aliased net_sSanAdd_sane_array;  -- rt_net.h:312
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSanAdd);  -- rt_net.h:313

   --  skipped anonymous struct anon_131

  -- # of entries  
   function xdr_net_sSanAdd return rpc_types_h.bool_t;  -- rt_net.h:315
   pragma Import (C, xdr_net_sSanAdd, "xdr_net_sSanAdd");

  -- Header  
   type net_sSanRemove_sid_array is array (0 .. 0) of aliased pwr_h.pwr_tSubid;
   type net_sSanRemove is record
      hdr : aliased net_sMessage;  -- rt_net.h:320
      vid : aliased pwr_h.pwr_tVolumeId;  -- rt_net.h:321
      count : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:322
      sid : aliased net_sSanRemove_sid_array;  -- rt_net.h:323
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSanRemove);  -- rt_net.h:319

  -- # of removals  
  -- Subscriptions to remove (dynamic)  
   function xdr_net_sSanRemove return rpc_types_h.bool_t;  -- rt_net.h:326
   pragma Import (C, xdr_net_sSanRemove, "xdr_net_sSanRemove");

   type net_sAlarm is record
      a : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:330
      b : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:331
      maxa : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:332
      maxb : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:333
      idx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:334
   end record;
   pragma Convention (C_Pass_By_Copy, net_sAlarm);  -- rt_net.h:329

   type net_sSanData is record
      sane : aliased net_sSanEntry;  -- rt_net.h:339
      al : aliased net_sAlarm;  -- rt_net.h:340
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSanData);  -- rt_net.h:338

  -- Header when used as message  
   type net_sSanUpdate_data_array is array (0 .. 0) of aliased net_sSanData;
   type net_sSanUpdate is record
      hdr : aliased net_sMessage;  -- rt_net.h:346
      count : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:347
      data : aliased net_sSanUpdate_data_array;  -- rt_net.h:348
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSanUpdate);  -- rt_net.h:349

   --  skipped anonymous struct anon_132

  -- # of SUBDATA entries in msg  
  -- Dynamic  
   function xdr_net_sSanUpdate return rpc_types_h.bool_t;  -- rt_net.h:351
   pragma Import (C, xdr_net_sSanUpdate, "xdr_net_sSanUpdate");

  --  Cache inquiry, fetch by name.   
  -- Header  
   subtype net_sNameToObject_name_array is Interfaces.C.char_array (0 .. 0);
   type net_sNameToObject is record
      hdr : aliased net_sMessage;  -- rt_net.h:355
      poid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:356
      trans : aliased pwr_h.pwr_tBitMask;  -- rt_net.h:357
      lcount : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:358
      rcount : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:359
      len : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:360
      name : aliased net_sNameToObject_name_array;  -- rt_net.h:361
   end record;
   pragma Convention (C_Pass_By_Copy, net_sNameToObject);  -- rt_net.h:362

   --  skipped anonymous struct anon_133

  -- Parent of name  
  -- Translation mask.   
  -- Number of left siblings wanted.  
  -- Number of lright siblings wanted.  
  -- name buffer length  
  -- name buffer  
   function xdr_net_sNameToObject return rpc_types_h.bool_t;  -- rt_net.h:364
   pragma Import (C, xdr_net_sNameToObject, "xdr_net_sNameToObject");

   type net_sOidToObject is record
      hdr : aliased net_sMessage;  -- rt_net.h:367
      oid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:368
      trans : aliased pwr_h.pwr_tBitMask;  -- rt_net.h:369
      lcount : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:370
      rcount : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:371
   end record;
   pragma Convention (C_Pass_By_Copy, net_sOidToObject);  -- rt_net.h:366

   type net_mGo;
   type anon_135 is record
      isParent : Extensions.Unsigned_1;  -- rt_net.h:376
      isAliasClient : Extensions.Unsigned_1;  -- rt_net.h:376
      isAliasServer : Extensions.Unsigned_1;  -- rt_net.h:376
      isMountClient : Extensions.Unsigned_1;  -- rt_net.h:376
      inSibList : Extensions.Unsigned_1;  -- rt_net.h:376
      hasSubClass : Extensions.Unsigned_1;  -- rt_net.h:376
      fill0 : Extensions.Unsigned_2;  -- rt_net.h:376
      fill1 : aliased unsigned_char;  -- rt_net.h:376
      fill2 : aliased unsigned_char;  -- rt_net.h:376
      fill3 : aliased unsigned_char;  -- rt_net.h:376
   end record;
   pragma Convention (C_Pass_By_Copy, anon_135);
   type net_mGo (discr : unsigned := 0) is record
      case discr is
         when 0 =>
            m : aliased pwr_h.pwr_tBitMask;  -- rt_net.h:375
         when others =>
            b : aliased anon_135;  -- rt_net.h:388
      end case;
   end record;
   pragma Convention (C_Pass_By_Copy, net_mGo);
   pragma Unchecked_Union (net_mGo);  -- rt_net.h:401

   --  skipped anonymous struct anon_134

   type net_sOixLink is record
      flink : aliased pwr_h.pwr_tObjectIx;  -- rt_net.h:404
      blink : aliased pwr_h.pwr_tObjectIx;  -- rt_net.h:405
   end record;
   pragma Convention (C_Pass_By_Copy, net_sOixLink);  -- rt_net.h:403

   type net_sGobject is record
      oid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:410
      cid : aliased pwr_h.pwr_tClassId;  -- rt_net.h:411
      f : aliased co_cdh_h.cdh_sFamily;  -- rt_net.h:412
      sib : aliased net_sOixLink;  -- rt_net.h:413
      soid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:414
      size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:415
      flags : net_mGo;  -- rt_net.h:416
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGobject);  -- rt_net.h:409

  -- Header  
   type net_sObjectR_g_array is array (0 .. 0) of aliased net_sGobject;
   type net_sObjectR is record
      hdr : aliased net_sMessage;  -- rt_net.h:422
      sts : aliased pwr_h.pwr_tStatus;  -- rt_net.h:423
      oid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:424
      count : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:425
      g : aliased net_sObjectR_g_array;  -- rt_net.h:426
   end record;
   pragma Convention (C_Pass_By_Copy, net_sObjectR);  -- rt_net.h:427

   --  skipped anonymous struct anon_136

  -- Status code  
  -- Objid of referenced object  
  -- # of headers in response  
  -- Array of object headers  
   function xdr_net_sObjectR return rpc_types_h.bool_t;  -- rt_net.h:429
   pragma Import (C, xdr_net_sObjectR, "xdr_net_sObjectR");

   type net_sGetObjectInfo is record
      hdr : aliased net_sMessage;  -- rt_net.h:433
      aref : aliased pwr_h.pwr_sAttrRef;  -- rt_net.h:434
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGetObjectInfo);  -- rt_net.h:432

  -- Header  
   subtype net_sGetObjectInfoR_info_array is Interfaces.C.char_array (0 .. 0);
   type net_sGetObjectInfoR is record
      hdr : aliased net_sMessage;  -- rt_net.h:438
      sts : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:439
      aref : aliased pwr_h.pwr_sAttrRef;  -- rt_net.h:440
      size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:441
      info : aliased net_sGetObjectInfoR_info_array;  -- rt_net.h:442
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGetObjectInfoR);  -- rt_net.h:443

   --  skipped anonymous struct anon_137

  -- Status code  
  -- Copy of requested info  
  -- Size of requested data, same as aref.size, in bytes.   
  -- Data requested.   
   function xdr_net_sGetObjectInfoR return rpc_types_h.bool_t;  -- rt_net.h:445
   pragma Import (C, xdr_net_sGetObjectInfoR, "xdr_net_sGetObjectInfoR");

  -- Set object information.   
  -- Header  
   subtype net_sSetObjectInfo_info_array is Interfaces.C.char_array (0 .. 0);
   type net_sSetObjectInfo is record
      hdr : aliased net_sMessage;  -- rt_net.h:450
      aref : aliased pwr_h.pwr_sAttrRef;  -- rt_net.h:451
      size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:452
      info : aliased net_sSetObjectInfo_info_array;  -- rt_net.h:453
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSetObjectInfo);  -- rt_net.h:454

   --  skipped anonymous struct anon_138

  -- Data reference  
  -- Size of requested data, same as aref.size, in bytes.   
  -- Data to write (size bytes)  
   function xdr_net_sSetObjectInfo return rpc_types_h.bool_t;  -- rt_net.h:456
   pragma Import (C, xdr_net_sSetObjectInfo, "xdr_net_sSetObjectInfo");

   type net_sSetObjectInfoR is record
      hdr : aliased net_sMessage;  -- rt_net.h:460
      sts : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:461
      aref : aliased pwr_h.pwr_sAttrRef;  -- rt_net.h:462
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSetObjectInfoR);  -- rt_net.h:459

   type net_sSiblings is record
      flink : aliased pwr_h.pwr_tObjectIx;  -- rt_net.h:467
      newblink : aliased pwr_h.pwr_tObjectIx;  -- rt_net.h:468
      blink : aliased pwr_h.pwr_tObjectIx;  -- rt_net.h:469
      newflink : aliased pwr_h.pwr_tObjectIx;  -- rt_net.h:470
   end record;
   pragma Convention (C_Pass_By_Copy, net_sSiblings);  -- rt_net.h:466

   type net_sParent is record
      oid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:475
      soid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:476
   end record;
   pragma Convention (C_Pass_By_Copy, net_sParent);  -- rt_net.h:474

   type net_sNotify is record
      hdr : aliased net_sMessage;  -- rt_net.h:481
      oid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:482
   end record;
   pragma Convention (C_Pass_By_Copy, net_sNotify);  -- rt_net.h:480

   type net_sCreateObject is record
      notify : aliased net_sNotify;  -- rt_net.h:487
      par : aliased net_sParent;  -- rt_net.h:488
      sib : aliased net_sSiblings;  -- rt_net.h:489
   end record;
   pragma Convention (C_Pass_By_Copy, net_sCreateObject);  -- rt_net.h:486

   type net_sDeleteObject is record
      notify : aliased net_sNotify;  -- rt_net.h:494
      par : aliased net_sParent;  -- rt_net.h:495
      sib : aliased net_sSiblings;  -- rt_net.h:496
   end record;
   pragma Convention (C_Pass_By_Copy, net_sDeleteObject);  -- rt_net.h:493

   type net_sMoveObject is record
      notify : aliased net_sNotify;  -- rt_net.h:501
      sib : aliased net_sOixLink;  -- rt_net.h:502
      opar : aliased net_sParent;  -- rt_net.h:503
      osib : aliased net_sSiblings;  -- rt_net.h:504
      npar : aliased net_sParent;  -- rt_net.h:505
      nsib : aliased net_sSiblings;  -- rt_net.h:506
   end record;
   pragma Convention (C_Pass_By_Copy, net_sMoveObject);  -- rt_net.h:500

   type net_sRenameObject is record
      notify : aliased net_sNotify;  -- rt_net.h:511
      f : aliased co_cdh_h.cdh_sFamily;  -- rt_net.h:512
   end record;
   pragma Convention (C_Pass_By_Copy, net_sRenameObject);  -- rt_net.h:510

   type net_sTime is record
      tv_sec : aliased sys_types_h.u_int;  -- rt_net.h:517
      tv_nsec : aliased sys_types_h.u_int;  -- rt_net.h:518
   end record;
   pragma Convention (C_Pass_By_Copy, net_sTime);  -- rt_net.h:516

   type net_sGvolume is record
      vid : aliased pwr_h.pwr_tVolumeId;  -- rt_net.h:523
      oid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:524
      name : aliased co_cdh_h.cdh_sObjName;  -- rt_net.h:525
      cid : aliased pwr_h.pwr_tClassId;  -- rt_net.h:526
      nid : aliased pwr_h.pwr_tNodeId;  -- rt_net.h:527
      time : aliased net_sTime;  -- rt_net.h:528
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGvolume);  -- rt_net.h:522

   type net_sGvolume7 is record
      vid : aliased pwr_h.pwr_tVolumeId;  -- rt_net.h:533
      oid : aliased pwr_h.pwr_tObjid;  -- rt_net.h:534
      name : aliased co_cdh_h.cdh_sObjName;  -- rt_net.h:535
      cid : aliased pwr_h.pwr_tClassId;  -- rt_net.h:536
      nid : aliased pwr_h.pwr_tNodeId;  -- rt_net.h:537
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGvolume7);  -- rt_net.h:532

  -- Header  
   type net_sVolumes_g_array is array (0 .. 0) of aliased net_sGvolume;
   type net_sVolumes is record
      hdr : aliased net_sMessage;  -- rt_net.h:544
      ctx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:545
      count : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:546
      g : aliased net_sVolumes_g_array;  -- rt_net.h:547
   end record;
   pragma Convention (C_Pass_By_Copy, net_sVolumes);  -- rt_net.h:548

   --  skipped anonymous struct anon_139

  -- # of headers   
  -- Array of volume headers  
   function xdr_net_sVolumes return rpc_types_h.bool_t;  -- rt_net.h:550
   pragma Import (C, xdr_net_sVolumes, "xdr_net_sVolumes");

  -- Header  
   type net_sVolumes7_g_array is array (0 .. 0) of aliased net_sGvolume7;
   type net_sVolumes7 is record
      hdr : aliased net_sMessage;  -- rt_net.h:553
      ctx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:554
      count : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:555
      g : aliased net_sVolumes7_g_array;  -- rt_net.h:556
   end record;
   pragma Convention (C_Pass_By_Copy, net_sVolumes7);  -- rt_net.h:557

   --  skipped anonymous struct anon_140

  -- # of headers   
  -- Array of volume headers  
   function xdr_net_sVolumes7 return rpc_types_h.bool_t;  -- rt_net.h:559
   pragma Import (C, xdr_net_sVolumes7, "xdr_net_sVolumes7");

   type net_sMount is record
      vid : aliased pwr_h.pwr_tVolumeId;  -- rt_net.h:563
   end record;
   pragma Convention (C_Pass_By_Copy, net_sMount);  -- rt_net.h:562

  -- Header  
   type net_sVolumesR_mount_array is array (0 .. 0) of aliased net_sMount;
   type net_sVolumesR is record
      hdr : aliased net_sMessage;  -- rt_net.h:567
      ctx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:568
      count : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:569
      mount : aliased net_sVolumesR_mount_array;  -- rt_net.h:570
   end record;
   pragma Convention (C_Pass_By_Copy, net_sVolumesR);  -- rt_net.h:571

   --  skipped anonymous struct anon_141

  -- # of headers   
  -- Array of mount requests  
   function xdr_net_sVolumesR return rpc_types_h.bool_t;  -- rt_net.h:573
   pragma Import (C, xdr_net_sVolumesR, "xdr_net_sVolumesR");

   type net_sGattribute is record
      ao : aliased net_sGobject;  -- rt_net.h:577
      ab : aliased net_sParam;  -- rt_net.h:578
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGattribute);  -- rt_net.h:576

   type net_sGclass is record
      time : aliased net_sTime;  -- rt_net.h:583
      dbsFlags : aliased pwr_h.pwr_tBitMask;  -- rt_net.h:584
      co : aliased net_sGobject;  -- rt_net.h:585
      cb : aliased net_sClassDef;  -- rt_net.h:586
      bo : aliased net_sGobject;  -- rt_net.h:587
      bb : aliased net_sObjBodyDef;  -- rt_net.h:588
      size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:589
      acount : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:590
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGclass);  -- rt_net.h:582

   type net_sGetGclass is record
      hdr : aliased net_sMessage;  -- rt_net.h:595
      ver : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:596
      cid : aliased pwr_h.pwr_tClassId;  -- rt_net.h:597
      aidx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:598
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGetGclass);  -- rt_net.h:594

  --*< Header  
   type net_sGetGclassR_attr_array is array (0 .. 0) of aliased net_sGattribute;
   type net_sGetGclassR is record
      hdr : aliased net_sMessage;  -- rt_net.h:604
      ver : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:605
      sts : aliased pwr_h.pwr_tStatus;  -- rt_net.h:606
      vname : aliased pwr_h.pwr_tObjName;  -- rt_net.h:610
      acntmsg : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:611
      saidx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:612
      naidx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:613
      gclass : aliased net_sGclass;  -- rt_net.h:615
      attr : aliased net_sGetGclassR_attr_array;  -- rt_net.h:616
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGetGclassR);  -- rt_net.h:617

   --  skipped anonymous struct anon_142

  --*< see net_sMessage for comment  
  --*< Status  
  -- The data below is only valid if ODD(sts)  
  --*< Volume name, needed if volume must be created  
  --*< Number of attributes in this message.  
  --*< Starting attribute index  
  --*< Index for next attribute which didn't fit 
  --                                    in this message or ULONG_MAX if all included  

  --*< Array of attributes  
   function xdr_net_sGetGclassR (xdrs : access rpc_xdr_h.XDR; objp : access net_sGetGclassR) return rpc_types_h.bool_t;  -- rt_net.h:619
   pragma Import (C, xdr_net_sGetGclassR, "xdr_net_sGetGclassR");

   type net_sCattribute is record
      aix : aliased pwr_h.pwr_tAix;  -- rt_net.h:623
      flags : pwr_class_h.pwr_mAdef;  -- rt_net.h:624
      c_type : aliased pwr_class_h.pwr_eType;  -- rt_net.h:625
      offs : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:626
      size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:627
      elem : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:628
      moffset : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:629
   end record;
   pragma Convention (C_Pass_By_Copy, net_sCattribute);  -- rt_net.h:622

   type net_sCclass is record
      cid : aliased pwr_h.pwr_tClassId;  -- rt_net.h:634
      time : aliased net_sTime;  -- rt_net.h:635
      size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:636
      acount : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:637
   end record;
   pragma Convention (C_Pass_By_Copy, net_sCclass);  -- rt_net.h:633

   type net_sGetCclass is record
      hdr : aliased net_sMessage;  -- rt_net.h:642
      ver : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:643
      cid : aliased pwr_h.pwr_tClassId;  -- rt_net.h:644
      time : aliased net_sTime;  -- rt_net.h:645
      aidx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:646
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGetCclass);  -- rt_net.h:641

  --*< Header  
   type net_sGetCclassR_attr_array is array (0 .. 0) of aliased net_sCattribute;
   type net_sGetCclassR is record
      hdr : aliased net_sMessage;  -- rt_net.h:651
      ver : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:652
      sts : aliased pwr_h.pwr_tStatus;  -- rt_net.h:653
      equal : aliased pwr_h.pwr_tBoolean;  -- rt_net.h:654
      acntmsg : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:660
      saidx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:661
      naidx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:662
      cclass : aliased net_sCclass;  -- rt_net.h:664
      attr : aliased net_sGetCclassR_attr_array;  -- rt_net.h:665
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGetCclassR);  -- rt_net.h:666

   --  skipped anonymous struct anon_143

  --*< see net_sMessage for comment  
  --*< Status  
  --*< The remote class is equal to the native  
  -- 
  --   * The data below is only valid if ODD(sts) and !equal 
  --    

  --*< Number of attributes in this message.  
  --*< Starting attribute index  
  --*< Index for next attribute which didn't fit 
  --                                    in this message or ULONG_MAX if all included  

  --*< Array of attributes  
   function xdr_net_sGetCclassR (xdrs : access rpc_xdr_h.XDR; objp : access net_sGetCclassR) return rpc_types_h.bool_t;  -- rt_net.h:669
   pragma Import (C, xdr_net_sGetCclassR, "xdr_net_sGetCclassR");

   subtype net_sFileList_dir_array is Interfaces.C.char_array (0 .. 255);
   subtype net_sFileList_pattern_array is Interfaces.C.char_array (0 .. 39);
   type net_sFileList is record
      hdr : aliased net_sMessage;  -- rt_net.h:673
      dir : aliased net_sFileList_dir_array;  -- rt_net.h:674
      pattern : aliased net_sFileList_pattern_array;  -- rt_net.h:675
   end record;
   pragma Convention (C_Pass_By_Copy, net_sFileList);  -- rt_net.h:672

  --*< Header  
   subtype net_sFileListR_files_array is Interfaces.C.char_array (0 .. 0);
   type net_sFileListR is record
      hdr : aliased net_sMessage;  -- rt_net.h:681
      sts : aliased pwr_h.pwr_tStatus;  -- rt_net.h:682
      filecnt : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:683
      files : aliased net_sFileListR_files_array;  -- rt_net.h:684
   end record;
   pragma Convention (C_Pass_By_Copy, net_sFileListR);  -- rt_net.h:685

   --  skipped anonymous struct anon_144

  --*< Status  
  --*< Number of files found.  
  --*< List of files  
   function xdr_net_sFileListR (xdrs : access rpc_xdr_h.XDR; objp : access net_sFileListR) return rpc_types_h.bool_t;  -- rt_net.h:687
   pragma Import (C, xdr_net_sFileListR, "xdr_net_sFileListR");

   type net_sGetCircBuffer is record
      hdr : aliased net_sMessage;  -- rt_net.h:691
      circ_aref : aliased pwr_h.pwr_sAttrRef;  -- rt_net.h:692
      resolution : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:693
      samples : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:694
      bufsize : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:695
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGetCircBuffer);  -- rt_net.h:690

  --*< Header  
   subtype net_sGetCircBufferR_buf_array is Interfaces.C.char_array (0 .. 0);
   type net_sGetCircBufferR is record
      hdr : aliased net_sMessage;  -- rt_net.h:701
      sts : aliased pwr_h.pwr_tStatus;  -- rt_net.h:702
      circ_aref : aliased pwr_h.pwr_sAttrRef;  -- rt_net.h:703
      first_idx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:704
      last_idx : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:705
      offset : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:706
      size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:707
      bufsize : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:708
      buf : aliased net_sGetCircBufferR_buf_array;  -- rt_net.h:709
   end record;
   pragma Convention (C_Pass_By_Copy, net_sGetCircBufferR);  -- rt_net.h:710

   --  skipped anonymous struct anon_145

  --*< Status  
  --*< CircBuffer attribute reference.  
  --*< First index in buffer.  
  --*< Last index in buffer.  
  --*< Offset for next update.  
  --*< Returned number of samples.  
  --*< Size data in bytes.  
  --*< Data  
   function xdr_net_sGetCircBufferR (xdrs : access rpc_xdr_h.XDR; objp : access net_sGetCircBufferR) return rpc_types_h.bool_t;  -- rt_net.h:712
   pragma Import (C, xdr_net_sGetCircBufferR, "xdr_net_sGetCircBufferR");

   type net_sUpdateCircBuffer_circ_aref_array is array (0 .. 9) of aliased pwr_h.pwr_sAttrRef;
   type net_sUpdateCircBuffer_resolution_array is array (0 .. 9) of aliased pwr_h.pwr_tUInt32;
   type net_sUpdateCircBuffer_samples_array is array (0 .. 9) of aliased pwr_h.pwr_tUInt32;
   type net_sUpdateCircBuffer_last_idx_array is array (0 .. 9) of aliased pwr_h.pwr_tUInt32;
   type net_sUpdateCircBuffer_offset_array is array (0 .. 9) of aliased pwr_h.pwr_tUInt32;
   type net_sUpdateCircBuffer_bufsize_array is array (0 .. 9) of aliased pwr_h.pwr_tUInt32;
   type net_sUpdateCircBuffer is record
      hdr : aliased net_sMessage;  -- rt_net.h:716
      info_size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:717
      circ_aref : aliased net_sUpdateCircBuffer_circ_aref_array;  -- rt_net.h:718
      resolution : aliased net_sUpdateCircBuffer_resolution_array;  -- rt_net.h:719
      samples : aliased net_sUpdateCircBuffer_samples_array;  -- rt_net.h:720
      last_idx : aliased net_sUpdateCircBuffer_last_idx_array;  -- rt_net.h:721
      offset : aliased net_sUpdateCircBuffer_offset_array;  -- rt_net.h:722
      bufsize : aliased net_sUpdateCircBuffer_bufsize_array;  -- rt_net.h:723
   end record;
   pragma Convention (C_Pass_By_Copy, net_sUpdateCircBuffer);  -- rt_net.h:715

  --*< Header  
   type net_sUpdateCircBufferR_circ_aref_array is array (0 .. 9) of aliased pwr_h.pwr_sAttrRef;
   type net_sUpdateCircBufferR_first_idx_array is array (0 .. 9) of aliased pwr_h.pwr_tUInt32;
   type net_sUpdateCircBufferR_last_idx_array is array (0 .. 9) of aliased pwr_h.pwr_tUInt32;
   type net_sUpdateCircBufferR_offset_array is array (0 .. 9) of aliased pwr_h.pwr_tUInt32;
   type net_sUpdateCircBufferR_size_array is array (0 .. 9) of aliased pwr_h.pwr_tUInt32;
   type net_sUpdateCircBufferR_bufsize_array is array (0 .. 9) of aliased pwr_h.pwr_tUInt32;
   subtype net_sUpdateCircBufferR_buf_array is Interfaces.C.char_array (0 .. 0);
   type net_sUpdateCircBufferR is record
      hdr : aliased net_sMessage;  -- rt_net.h:729
      sts : aliased pwr_h.pwr_tStatus;  -- rt_net.h:730
      info_size : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:731
      circ_aref : aliased net_sUpdateCircBufferR_circ_aref_array;  -- rt_net.h:732
      first_idx : aliased net_sUpdateCircBufferR_first_idx_array;  -- rt_net.h:733
      last_idx : aliased net_sUpdateCircBufferR_last_idx_array;  -- rt_net.h:734
      offset : aliased net_sUpdateCircBufferR_offset_array;  -- rt_net.h:735
      size : aliased net_sUpdateCircBufferR_size_array;  -- rt_net.h:736
      bufsize : aliased net_sUpdateCircBufferR_bufsize_array;  -- rt_net.h:737
      bsize : aliased pwr_h.pwr_tUInt32;  -- rt_net.h:738
      buf : aliased net_sUpdateCircBufferR_buf_array;  -- rt_net.h:739
   end record;
   pragma Convention (C_Pass_By_Copy, net_sUpdateCircBufferR);  -- rt_net.h:740

   --  skipped anonymous struct anon_146

  --*< Status  
  --*< CircBuffer attribute reference.  
  --*< First index in buffer.  
  --*< Last index in buffer.  
  --*< Offset for next update.  
  --*< Returned number of samples.  
  --*< Size data for each item in bytes.  
  --*< Total size data in bytes.  
  --*< Data  
   function xdr_net_sUpdateCircBufferR (xdrs : access rpc_xdr_h.XDR; objp : access net_sUpdateCircBufferR) return rpc_types_h.bool_t;  -- rt_net.h:742
   pragma Import (C, xdr_net_sUpdateCircBufferR, "xdr_net_sUpdateCircBufferR");

  --  Max # of gohs in a cache_fetch_response. The message will not be
  --    bigger than cvol_cMaxSize bytes.   

  -- Callable functions.   
   function net_Alloc
     (sts : access pwr_h.pwr_tStatus;
      put : access rt_qcom_h.qcom_sPut;
      size : int;
      c_subtype : net_eMsg) return System.Address;  -- rt_net.h:750
   pragma Import (C, net_Alloc, "net_Alloc");

   function net_Free (sts : access pwr_h.pwr_tStatus; mp : System.Address) return pwr_h.pwr_tBoolean;  -- rt_net.h:758
   pragma Import (C, net_Free, "net_Free");

   function net_Send
     (sts : access pwr_h.pwr_tStatus;
      tgt : access rt_qcom_h.qcom_sQid;
      put : access rt_qcom_h.qcom_sPut) return pwr_h.pwr_tBoolean;  -- rt_net.h:764
   pragma Import (C, net_Send, "net_Send");

   function net_Reply
     (sts : access pwr_h.pwr_tStatus;
      get : access rt_qcom_h.qcom_sGet;
      put : access rt_qcom_h.qcom_sPut;
      sid : pwr_h.pwr_tSid) return pwr_h.pwr_tBoolean;  -- rt_net.h:771
   pragma Import (C, net_Reply, "net_Reply");

   function net_Put
     (sts : access pwr_h.pwr_tStatus;
      tgt : access rt_qcom_h.qcom_sQid;
      mp : System.Address;
      c_type : net_eMsg;
      id : unsigned;
      size : int;
      sid : pwr_h.pwr_tSid) return pwr_h.pwr_tBoolean;  -- rt_net.h:779
   pragma Import (C, net_Put, "net_Put");

   function net_Receive
     (sts : access pwr_h.pwr_tStatus;
      get : access rt_qcom_h.qcom_sGet;
      tmo : int) return System.Address;  -- rt_net.h:790
   pragma Import (C, net_Receive, "net_Receive");

   function net_Request
     (sts : access pwr_h.pwr_tStatus;
      tgt : access rt_qcom_h.qcom_sQid;
      put : access rt_qcom_h.qcom_sPut;
      get : access rt_qcom_h.qcom_sGet;
      gtype : net_eMsg;
      flags : pwr_h.pwr_tBitMask;
      sid : pwr_h.pwr_tSid) return System.Address;  -- rt_net.h:797
   pragma Import (C, net_Request, "net_Request");

   function net_Connect
     (sts : access pwr_h.pwr_tStatus;
      aid : access rt_qcom_h.qcom_sAid;
      qid : access rt_qcom_h.qcom_sQid;
      attr : access rt_qcom_h.qcom_sQattr;
      name : Interfaces.C.Strings.chars_ptr) return pwr_h.pwr_tBoolean;  -- rt_net.h:808
   pragma Import (C, net_Connect, "net_Connect");

   net_cNTime : aliased net_sTime;  -- rt_net.h:816
   pragma Import (CPP, net_cNTime, "_ZL10net_cNTime");

   function net_NetTimeToTime (nt : System.Address) return pwr_h.pwr_tTime;  -- rt_net.h:818
   pragma Import (C, net_NetTimeToTime, "net_NetTimeToTime");

   function net_TimeToNetTime (t : access constant pwr_h.pwr_tTime) return net_sTime;  -- rt_net.h:819
   pragma Import (C, net_TimeToNetTime, "net_TimeToNetTime");

   function net_NetTimeToDeltaTime (nt : System.Address) return pwr_h.pwr_tDeltaTime;  -- rt_net.h:820
   pragma Import (C, net_NetTimeToDeltaTime, "net_NetTimeToDeltaTime");

   function net_DeltaTimeToNetTime (t : access constant pwr_h.pwr_tDeltaTime) return net_sTime;  -- rt_net.h:822
   pragma Import (C, net_DeltaTimeToNetTime, "net_DeltaTimeToNetTime");

   function net_GetTime (nt : access net_sTime) return int;  -- rt_net.h:823
   pragma Import (C, net_GetTime, "net_GetTime");

   function net_StringToAddr (str : Interfaces.C.Strings.chars_ptr; naddr : access netinet_in_h.in_addr) return int;  -- rt_net.h:824
   pragma Import (C, net_StringToAddr, "net_StringToAddr");

  -- the xdr functions  
   function xdr_net_eMsg (arg1 : access rpc_xdr_h.XDR; arg2 : access net_eMsg) return rpc_types_h.bool_t;  -- rt_net.h:835
   pragma Import (C, xdr_net_eMsg, "xdr_net_eMsg");

   function xdr_net_eEvent (arg1 : access rpc_xdr_h.XDR; arg2 : access net_eEvent) return rpc_types_h.bool_t;  -- rt_net.h:836
   pragma Import (C, xdr_net_eEvent, "xdr_net_eEvent");

   function xdr_net_sMessage (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sMessage) return rpc_types_h.bool_t;  -- rt_net.h:837
   pragma Import (C, xdr_net_sMessage, "xdr_net_sMessage");

   function xdr_net_sError (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sError) return rpc_types_h.bool_t;  -- rt_net.h:838
   pragma Import (C, xdr_net_sError, "xdr_net_sError");

   function xdr_net_sNode (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sNode) return rpc_types_h.bool_t;  -- rt_net.h:839
   pragma Import (C, xdr_net_sNode, "xdr_net_sNode");

   function xdr_net_sId (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sId) return rpc_types_h.bool_t;  -- rt_net.h:840
   pragma Import (C, xdr_net_sId, "xdr_net_sId");

   function xdr_net_sIdAck2 (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sIdAck2) return rpc_types_h.bool_t;  -- rt_net.h:841
   pragma Import (C, xdr_net_sIdAck2, "xdr_net_sIdAck2");

   function xdr_net_sNodeUp (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sNodeUp) return rpc_types_h.bool_t;  -- rt_net.h:842
   pragma Import (C, xdr_net_sNodeUp, "xdr_net_sNodeUp");

   function xdr_net_eState (arg1 : access rpc_xdr_h.XDR; arg2 : access net_eState) return rpc_types_h.bool_t;  -- rt_net.h:843
   pragma Import (C, xdr_net_eState, "xdr_net_eState");

   function xdr_net_sClassDef (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sClassDef) return rpc_types_h.bool_t;  -- rt_net.h:844
   pragma Import (C, xdr_net_sClassDef, "xdr_net_sClassDef");

   function xdr_net_sObjBodyDef (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sObjBodyDef) return rpc_types_h.bool_t;  -- rt_net.h:845
   pragma Import (C, xdr_net_sObjBodyDef, "xdr_net_sObjBodyDef");

   function xdr_net_sParInfo (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sParInfo) return rpc_types_h.bool_t;  -- rt_net.h:846
   pragma Import (C, xdr_net_sParInfo, "xdr_net_sParInfo");

   function xdr_net_sParam (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sParam) return rpc_types_h.bool_t;  -- rt_net.h:847
   pragma Import (C, xdr_net_sParam, "xdr_net_sParam");

   function xdr_net_sSubSpec (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sSubSpec) return rpc_types_h.bool_t;  -- rt_net.h:848
   pragma Import (C, xdr_net_sSubSpec, "xdr_net_sSubSpec");

   function xdr_net_sSanEntry (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sSanEntry) return rpc_types_h.bool_t;  -- rt_net.h:849
   pragma Import (C, xdr_net_sSanEntry, "xdr_net_sSanEntry");

   function xdr_net_sAlarm (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sAlarm) return rpc_types_h.bool_t;  -- rt_net.h:850
   pragma Import (C, xdr_net_sAlarm, "xdr_net_sAlarm");

   function xdr_net_sSanData (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sSanData) return rpc_types_h.bool_t;  -- rt_net.h:851
   pragma Import (C, xdr_net_sSanData, "xdr_net_sSanData");

   function xdr_net_sOidToObject (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sOidToObject) return rpc_types_h.bool_t;  -- rt_net.h:852
   pragma Import (C, xdr_net_sOidToObject, "xdr_net_sOidToObject");

   function xdr_net_sOixLink (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sOixLink) return rpc_types_h.bool_t;  -- rt_net.h:853
   pragma Import (C, xdr_net_sOixLink, "xdr_net_sOixLink");

   function xdr_net_sGobject (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sGobject) return rpc_types_h.bool_t;  -- rt_net.h:854
   pragma Import (C, xdr_net_sGobject, "xdr_net_sGobject");

   function xdr_net_sGetObjectInfo (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sGetObjectInfo) return rpc_types_h.bool_t;  -- rt_net.h:855
   pragma Import (C, xdr_net_sGetObjectInfo, "xdr_net_sGetObjectInfo");

   function xdr_net_sSetObjectInfoR (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sSetObjectInfoR) return rpc_types_h.bool_t;  -- rt_net.h:856
   pragma Import (C, xdr_net_sSetObjectInfoR, "xdr_net_sSetObjectInfoR");

   function xdr_net_sSiblings (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sSiblings) return rpc_types_h.bool_t;  -- rt_net.h:857
   pragma Import (C, xdr_net_sSiblings, "xdr_net_sSiblings");

   function xdr_net_sParent (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sParent) return rpc_types_h.bool_t;  -- rt_net.h:858
   pragma Import (C, xdr_net_sParent, "xdr_net_sParent");

   function xdr_net_sNotify (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sNotify) return rpc_types_h.bool_t;  -- rt_net.h:859
   pragma Import (C, xdr_net_sNotify, "xdr_net_sNotify");

   function xdr_net_sCreateObject (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sCreateObject) return rpc_types_h.bool_t;  -- rt_net.h:860
   pragma Import (C, xdr_net_sCreateObject, "xdr_net_sCreateObject");

   function xdr_net_sDeleteObject (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sDeleteObject) return rpc_types_h.bool_t;  -- rt_net.h:861
   pragma Import (C, xdr_net_sDeleteObject, "xdr_net_sDeleteObject");

   function xdr_net_sMoveObject (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sMoveObject) return rpc_types_h.bool_t;  -- rt_net.h:862
   pragma Import (C, xdr_net_sMoveObject, "xdr_net_sMoveObject");

   function xdr_net_sRenameObject (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sRenameObject) return rpc_types_h.bool_t;  -- rt_net.h:863
   pragma Import (C, xdr_net_sRenameObject, "xdr_net_sRenameObject");

   function xdr_net_sTime (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sTime) return rpc_types_h.bool_t;  -- rt_net.h:864
   pragma Import (C, xdr_net_sTime, "xdr_net_sTime");

   function xdr_net_sGvolume (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sGvolume) return rpc_types_h.bool_t;  -- rt_net.h:865
   pragma Import (C, xdr_net_sGvolume, "xdr_net_sGvolume");

   function xdr_net_sGvolume7 (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sGvolume7) return rpc_types_h.bool_t;  -- rt_net.h:866
   pragma Import (C, xdr_net_sGvolume7, "xdr_net_sGvolume7");

   function xdr_net_sMount (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sMount) return rpc_types_h.bool_t;  -- rt_net.h:867
   pragma Import (C, xdr_net_sMount, "xdr_net_sMount");

   function xdr_net_sGattribute (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sGattribute) return rpc_types_h.bool_t;  -- rt_net.h:868
   pragma Import (C, xdr_net_sGattribute, "xdr_net_sGattribute");

   function xdr_net_sGclass (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sGclass) return rpc_types_h.bool_t;  -- rt_net.h:869
   pragma Import (C, xdr_net_sGclass, "xdr_net_sGclass");

   function xdr_net_sGetGclass (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sGetGclass) return rpc_types_h.bool_t;  -- rt_net.h:870
   pragma Import (C, xdr_net_sGetGclass, "xdr_net_sGetGclass");

   function xdr_net_sCattribute (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sCattribute) return rpc_types_h.bool_t;  -- rt_net.h:871
   pragma Import (C, xdr_net_sCattribute, "xdr_net_sCattribute");

   function xdr_net_sCclass (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sCclass) return rpc_types_h.bool_t;  -- rt_net.h:872
   pragma Import (C, xdr_net_sCclass, "xdr_net_sCclass");

   function xdr_net_sGetCclass (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sGetCclass) return rpc_types_h.bool_t;  -- rt_net.h:873
   pragma Import (C, xdr_net_sGetCclass, "xdr_net_sGetCclass");

   function xdr_net_sFileList (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sFileList) return rpc_types_h.bool_t;  -- rt_net.h:874
   pragma Import (C, xdr_net_sFileList, "xdr_net_sFileList");

   function xdr_net_sGetCircBuffer (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sGetCircBuffer) return rpc_types_h.bool_t;  -- rt_net.h:875
   pragma Import (C, xdr_net_sGetCircBuffer, "xdr_net_sGetCircBuffer");

   function xdr_net_sUpdateCircBuffer (arg1 : access rpc_xdr_h.XDR; arg2 : access net_sUpdateCircBuffer) return rpc_types_h.bool_t;  -- rt_net.h:876
   pragma Import (C, xdr_net_sUpdateCircBuffer, "xdr_net_sUpdateCircBuffer");

end rt_net_h;
