-- 
-- * Proview   Open Source Process Control.
-- * Copyright (C) 2005-2014 SSAB EMEA AB.
-- *
-- * This file is part of Proview.
-- *
-- * This program is free software; you can redistribute it and/or 
-- * modify it under the terms of the GNU General Public License as 
-- * published by the Free Software Foundation, either version 2 of 
-- * the License, or (at your option) any later version.
-- *
-- * This program is distributed in the hope that it will be useful 
-- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
-- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
-- * GNU General Public License for more details.
-- *
-- * You should have received a copy of the GNU General Public License 
-- * along with Proview. If not, see <http://www.gnu.org/licenses/>
-- *
-- * Linking Proview statically or dynamically with other modules is
-- * making a combined work based on Proview. Thus, the terms and 
-- * conditions of the GNU General Public License cover the whole 
-- * combination.
-- *
-- * In addition, as a special exception, the copyright holders of
-- * Proview give you permission to, from the build function in the
-- * Proview Configurator, combine Proview with modules generated by the
-- * Proview PLC Editor to a PLC program, regardless of the license
-- * terms of these modules. You may copy and distribute the resulting
-- * combined work under the terms of your choice, provided that every 
-- * copy of the combined work is accompanied by a complete copy of 
-- * the source code of Proview (the version used to produce the 
-- * combined work), being distributed under the terms of the GNU 
-- * General Public License plus this exception.
--  
--   Ada binding by Jan de Kruijf (jan.de.kruyf@hotmail.com)
--

pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with pwr;
--with rpc_types_h;
with co_platform;
--with rt_net_h;
with rt_qcom;
--limited with rpc_xdr_h;

package rt_mh_net is
   
   --  mh_cMsgClass           : constant := 201;  --  rt_mh_net.h:58
   --  mh_cVersion            : constant := 4;  --  rt_mh_net.h:59
   --  mh_cProcHandler        : constant := 111;  --  rt_mh_net.h:60
   
   --  mh_cSendRcvTmo         : constant := 200;  --  rt_mh_net.h:63

   mh_mEventStatus_NotRet : constant := (2 ** 0);  --  rt_mh_net.h:67
   mh_mEventStatus_NotAck : constant := (2 ** 1);  --  rt_mh_net.h:68
   mh_mEventStatus_Block  : constant := (2 ** 2);  --  rt_mh_net.h:69
   
   -- Bit masks  
   subtype mh_mEventStatus is pwr.pwr_tUInt32;  -- rt_mh_net.h:72
   
   subtype mh_eEvent is unsigned;
   mh_eEvent_u_u             : constant mh_eEvent := 0;
   mh_eEvent_Ack             : constant mh_eEvent := 1;
   mh_eEvent_Block           : constant mh_eEvent := 2;
   mh_eEvent_Cancel          : constant mh_eEvent := 3;
   mh_eEvent_CancelBlock     : constant mh_eEvent := 4;
   mh_eEvent_Missing         : constant mh_eEvent := 5;
   mh_eEvent_Reblock         : constant mh_eEvent := 6;
   mh_eEvent_Return          : constant mh_eEvent := 7;
   mh_eEvent_Unblock         : constant mh_eEvent := 8;
   mh_eEvent_Info            : constant mh_eEvent := 32;
   mh_eEvent_Alarm           : constant mh_eEvent := 64;
   mh_eEvent_u               : constant mh_eEvent := 65;
   -- Type of event that the message handler recognizes.
   -- rt_mh_net.h:78
   
   subtype mh_eEventPrio is unsigned;
   mh_eEventPrio_u_u         : constant mh_eEventPrio := 0;
   mh_eEventPrio_A           : constant mh_eEventPrio := 67;
   mh_eEventPrio_B           : constant mh_eEventPrio := 66;
   mh_eEventPrio_C           : constant mh_eEventPrio := 65;
   mh_eEventPrio_D           : constant mh_eEventPrio := 64;
   mh_eEventPrio_u           : constant mh_eEventPrio := 63;  
   -- This enumeration defines the priority of the event. 
   -- This affects how the message handler treats the generated message. 
   -- For A and B priorities the alarm window displays number of alarms, 
   -- number of unacknowledged alarms, identities of the alarms, and associated 
   -- message texts. 
   -- For C and D priorities, only number of alarms and number of 
   -- unacknowledged alarms are shown. 
   --
   -- <mh_eEventPrio_A>  Priority A, the highest priority. 
   -- Alarm messages of this priority are shown in the upper part 
   -- of the alarm window. 
   --
   -- <mh_eEventPrio_B>  Priority B. 
   -- These messages are shown in the lower part of the alarm window. 
   --
   -- <mh_eEventPrio_C>  Priority C. 
   -- <mh_eEventPrio_D>  Priority D. This is the lowest priority. 
   -- rt_mh_net.h:111

   subtype mh_eSupType is unsigned;
   mh_eSupType_u_u           : constant mh_eSupType := 0;
   mh_eSupType_Digital       : constant mh_eSupType := 1;
   mh_eSupType_Analog        : constant mh_eSupType := 2;
   mh_eSupType_None          : constant mh_eSupType := 3;
   mh_eSupType_Link          : constant mh_eSupType := 4;
   mh_eSupType_Cycle         : constant mh_eSupType := 4;
   mh_eSupType_u             : constant mh_eSupType := 5;  
   -- Type of supervision data.
    -- 
    -- This enumeration is used to indicate what kind of data is supplied 
    -- in an application message (See mh_sApplMessage).
    -- <mh_eSupType_Digital> Digital supervision data
    -- <mh_eSupType_Analog>  Analog supervision data 
    -- <mh_eSupType_Link>   ZZZ
    -- <mh_eSupType_Cycle>  ZZZ
    -- rt_mh_net.h:132
   
   
   subtype mh_mEventFlags is unsigned;
   mh_mEventFlags_Return     : constant mh_mEventFlags := 1;
   mh_mEventFlags_Ack        : constant mh_mEventFlags := 2;
   mh_mEventFlags_Bell       : constant mh_mEventFlags := 4;
   mh_mEventFlags_Force      : constant mh_mEventFlags := 8;
   mh_mEventFlags_InfoWindow : constant mh_mEventFlags := 16;
   mh_mEventFlags_Returned   : constant mh_mEventFlags := 32;
   mh_mEventFlags_NoObject   : constant mh_mEventFlags := 64;  
   -- rt_mh_net.h:209
   
   type mh_sASupInfo is 
      record
	 ActualValue : aliased pwr.pwr_tFloat32;
	 CtrlLimit   : aliased pwr.pwr_tFloat32;
	 Hysteres    : aliased pwr.pwr_tFloat32;
	 High        : aliased pwr.pwr_tBoolean;
	 Unit        : aliased pwr.pwr_tString16;
      end record;
   -- Data describing supervision of an analog value 
   --
   -- <ActualValue>  The value of the supervised attribute at the 
   --                 time when the message was generated. 
   -- <CtrlLimit>    The limit, at which a message will be generated. 
   -- <Hysteres>     How much the supervised value will have to change before 
   --                  a return message will be issued. 
   -- <High>         Indicates whether the message will be generated when the 
   --		       limit is exceeded (TRUE) or the value falls below it (FALSE).
   -- <Unit>         A string representing the unit of the value. 
   pragma Convention (C_Pass_By_Copy, mh_sASupInfo);  -- rt_mh_net.h:233
   
   type mh_sDSupInfo is 
      record
	 ActualValue : aliased pwr.pwr_tBoolean;
	 High        : aliased pwr.pwr_tBoolean; 
      end record;
   -- Data describing supervision of a digital value 
   --
   -- <ActualValue>  The value of the supervised attribute at the time 
   --                  when the message was generated.
   -- <High>         Indicates whether a high or a low value generates a message.
   pragma Convention (C_Pass_By_Copy, mh_sDSupInfo);  -- rt_mh_net.h:251

   
   type Mh_USupInfo_U_T (discr : unsigned := 0) is 
      record
	 case discr is
	    when 0      =>
	       A : aliased mh_sASupInfo;  -- rt_mh_net.h:265
	    when others =>
	       D : aliased mh_sDSupInfo;  -- rt_mh_net.h:266
	 end case;
      end record;
   pragma Convention (C_Pass_By_Copy, Mh_USupInfo_U_T);
   pragma Unchecked_Union (Mh_USupInfo_U_T);
   
   type mh_uSupInfo is 
      record
	 SupType       : aliased mh_eSupType;  -- rt_mh_net.h:264
	 mh_uSupInfo_u : Mh_USupInfo_U_T;  -- rt_mh_net.h:267
      end record;
   -- Data describing supervision data.
   -- 
   -- <mh_uSubInfo_u>  Union that contains either mh_sASupInfo or mh_sDSupInfo.
   pragma Convention (C_Pass_By_Copy, mh_uSupInfo);  -- rt_mh_net.h:263
   
end Rt_Mh_Net;

